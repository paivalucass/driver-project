
target/release/snake_game:     file format elf64-x86-64

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000318  0000000000000318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000030  0000000000000338  0000000000000338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000368  0000000000000368  00000368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000000038c  000000000000038c  0000038c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000034  00000000000003b0  00000000000003b0  000003b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       00000378  00000000000003e8  00000000000003e8  000003e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       00000306  0000000000000760  0000000000000760  00000760  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  0000004a  0000000000000a66  0000000000000a66  00000a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 000000e0  0000000000000ab0  0000000000000ab0  00000ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     00000180  0000000000000b90  0000000000000b90  00000b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000270  0000000000000d10  0000000000000d10  00000d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000001000  0000000000001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          000001b0  0000000000001020  0000000000001020  00001020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .plt.got      00000010  00000000000011d0  00000000000011d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .plt.sec      000001a0  00000000000011e0  00000000000011e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text         000014da  0000000000001380  0000000000001380  00001380  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .fini         0000000d  000000000000285c  000000000000285c  0000285c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .rodata       00000080  0000000000003000  0000000000003000  00003000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .eh_frame_hdr 0000013c  0000000000003080  0000000000003080  00003080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .eh_frame     0000059c  00000000000031c0  00000000000031c0  000031c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .gcc_except_table 00000041  000000000000375c  000000000000375c  0000375c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .init_array   00000028  0000000000004ca8  0000000000004ca8  00003ca8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .fini_array   00000008  0000000000004cd0  0000000000004cd0  00003cd0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .dynamic      00000210  0000000000004cd8  0000000000004cd8  00003cd8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .got          00000118  0000000000004ee8  0000000000004ee8  00003ee8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .data         00000018  0000000000005000  0000000000005000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 26 .bss          00000a00  0000000000005040  0000000000005040  00004018  2**6
                  ALLOC
 27 .comment      0000002b  0000000000000000  0000000000000000  00004018  2**0
                  CONTENTS, READONLY
 28 .debug_aranges 00000180  0000000000000000  0000000000000000  00004043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_info   00018104  0000000000000000  0000000000000000  000041c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_abbrev 00002dee  0000000000000000  0000000000000000  0001c2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line   0000229d  0000000000000000  0000000000000000  0001f0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_str    000072d1  0000000000000000  0000000000000000  00021352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_line_str 00000644  0000000000000000  0000000000000000  00028623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 34 .debug_loclists 00002bb3  0000000000000000  0000000000000000  00028c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 35 .debug_rnglists 00000ab3  0000000000000000  0000000000000000  0002b81a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 3f 00 00 	mov    0x3fd9(%rip),%rax        # 4fe8 <__gmon_start__@Base>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 ca 3e 00 00    	push   0x3eca(%rip)        # 4ef0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 cb 3e 00 00 	bnd jmp *0x3ecb(%rip)        # 4ef8 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	push   $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	push   $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	push   $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    105f:	90                   	nop
    1060:	f3 0f 1e fa          	endbr64 
    1064:	68 03 00 00 00       	push   $0x3
    1069:	f2 e9 b1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    106f:	90                   	nop
    1070:	f3 0f 1e fa          	endbr64 
    1074:	68 04 00 00 00       	push   $0x4
    1079:	f2 e9 a1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    107f:	90                   	nop
    1080:	f3 0f 1e fa          	endbr64 
    1084:	68 05 00 00 00       	push   $0x5
    1089:	f2 e9 91 ff ff ff    	bnd jmp 1020 <_init+0x20>
    108f:	90                   	nop
    1090:	f3 0f 1e fa          	endbr64 
    1094:	68 06 00 00 00       	push   $0x6
    1099:	f2 e9 81 ff ff ff    	bnd jmp 1020 <_init+0x20>
    109f:	90                   	nop
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	68 07 00 00 00       	push   $0x7
    10a9:	f2 e9 71 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10af:	90                   	nop
    10b0:	f3 0f 1e fa          	endbr64 
    10b4:	68 08 00 00 00       	push   $0x8
    10b9:	f2 e9 61 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10bf:	90                   	nop
    10c0:	f3 0f 1e fa          	endbr64 
    10c4:	68 09 00 00 00       	push   $0x9
    10c9:	f2 e9 51 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10cf:	90                   	nop
    10d0:	f3 0f 1e fa          	endbr64 
    10d4:	68 0a 00 00 00       	push   $0xa
    10d9:	f2 e9 41 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10df:	90                   	nop
    10e0:	f3 0f 1e fa          	endbr64 
    10e4:	68 0b 00 00 00       	push   $0xb
    10e9:	f2 e9 31 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10ef:	90                   	nop
    10f0:	f3 0f 1e fa          	endbr64 
    10f4:	68 0c 00 00 00       	push   $0xc
    10f9:	f2 e9 21 ff ff ff    	bnd jmp 1020 <_init+0x20>
    10ff:	90                   	nop
    1100:	f3 0f 1e fa          	endbr64 
    1104:	68 0d 00 00 00       	push   $0xd
    1109:	f2 e9 11 ff ff ff    	bnd jmp 1020 <_init+0x20>
    110f:	90                   	nop
    1110:	f3 0f 1e fa          	endbr64 
    1114:	68 0e 00 00 00       	push   $0xe
    1119:	f2 e9 01 ff ff ff    	bnd jmp 1020 <_init+0x20>
    111f:	90                   	nop
    1120:	f3 0f 1e fa          	endbr64 
    1124:	68 0f 00 00 00       	push   $0xf
    1129:	f2 e9 f1 fe ff ff    	bnd jmp 1020 <_init+0x20>
    112f:	90                   	nop
    1130:	f3 0f 1e fa          	endbr64 
    1134:	68 10 00 00 00       	push   $0x10
    1139:	f2 e9 e1 fe ff ff    	bnd jmp 1020 <_init+0x20>
    113f:	90                   	nop
    1140:	f3 0f 1e fa          	endbr64 
    1144:	68 11 00 00 00       	push   $0x11
    1149:	f2 e9 d1 fe ff ff    	bnd jmp 1020 <_init+0x20>
    114f:	90                   	nop
    1150:	f3 0f 1e fa          	endbr64 
    1154:	68 12 00 00 00       	push   $0x12
    1159:	f2 e9 c1 fe ff ff    	bnd jmp 1020 <_init+0x20>
    115f:	90                   	nop
    1160:	f3 0f 1e fa          	endbr64 
    1164:	68 13 00 00 00       	push   $0x13
    1169:	f2 e9 b1 fe ff ff    	bnd jmp 1020 <_init+0x20>
    116f:	90                   	nop
    1170:	f3 0f 1e fa          	endbr64 
    1174:	68 14 00 00 00       	push   $0x14
    1179:	f2 e9 a1 fe ff ff    	bnd jmp 1020 <_init+0x20>
    117f:	90                   	nop
    1180:	f3 0f 1e fa          	endbr64 
    1184:	68 15 00 00 00       	push   $0x15
    1189:	f2 e9 91 fe ff ff    	bnd jmp 1020 <_init+0x20>
    118f:	90                   	nop
    1190:	f3 0f 1e fa          	endbr64 
    1194:	68 16 00 00 00       	push   $0x16
    1199:	f2 e9 81 fe ff ff    	bnd jmp 1020 <_init+0x20>
    119f:	90                   	nop
    11a0:	f3 0f 1e fa          	endbr64 
    11a4:	68 17 00 00 00       	push   $0x17
    11a9:	f2 e9 71 fe ff ff    	bnd jmp 1020 <_init+0x20>
    11af:	90                   	nop
    11b0:	f3 0f 1e fa          	endbr64 
    11b4:	68 18 00 00 00       	push   $0x18
    11b9:	f2 e9 61 fe ff ff    	bnd jmp 1020 <_init+0x20>
    11bf:	90                   	nop
    11c0:	f3 0f 1e fa          	endbr64 
    11c4:	68 19 00 00 00       	push   $0x19
    11c9:	f2 e9 51 fe ff ff    	bnd jmp 1020 <_init+0x20>
    11cf:	90                   	nop

Disassembly of section .plt.got:

00000000000011d0 <__cxa_finalize@plt>:
    11d0:	f3 0f 1e fa          	endbr64 
    11d4:	f2 ff 25 f5 3d 00 00 	bnd jmp *0x3df5(%rip)        # 4fd0 <__cxa_finalize@GLIBC_2.2.5>
    11db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

00000000000011e0 <_ZNSo3putEc@plt>:
    11e0:	f3 0f 1e fa          	endbr64 
    11e4:	f2 ff 25 15 3d 00 00 	bnd jmp *0x3d15(%rip)        # 4f00 <_ZNSo3putEc@GLIBCXX_3.4>
    11eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000011f0 <rand@plt>:
    11f0:	f3 0f 1e fa          	endbr64 
    11f4:	f2 ff 25 0d 3d 00 00 	bnd jmp *0x3d0d(%rip)        # 4f08 <rand@GLIBC_2.2.5>
    11fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001200 <getc@plt>:
    1200:	f3 0f 1e fa          	endbr64 
    1204:	f2 ff 25 05 3d 00 00 	bnd jmp *0x3d05(%rip)        # 4f10 <getc@GLIBC_2.2.5>
    120b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001210 <_ZSt20__throw_length_errorPKc@plt>:
    1210:	f3 0f 1e fa          	endbr64 
    1214:	f2 ff 25 fd 3c 00 00 	bnd jmp *0x3cfd(%rip)        # 4f18 <_ZSt20__throw_length_errorPKc@GLIBCXX_3.4>
    121b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001220 <sem_wait@plt>:
    1220:	f3 0f 1e fa          	endbr64 
    1224:	f2 ff 25 f5 3c 00 00 	bnd jmp *0x3cf5(%rip)        # 4f20 <sem_wait@GLIBC_2.34>
    122b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001230 <_ZNSo5flushEv@plt>:
    1230:	f3 0f 1e fa          	endbr64 
    1234:	f2 ff 25 ed 3c 00 00 	bnd jmp *0x3ced(%rip)        # 4f28 <_ZNSo5flushEv@GLIBCXX_3.4>
    123b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001240 <_ZSt28__throw_bad_array_new_lengthv@plt>:
    1240:	f3 0f 1e fa          	endbr64 
    1244:	f2 ff 25 e5 3c 00 00 	bnd jmp *0x3ce5(%rip)        # 4f30 <_ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29>
    124b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001250 <memcpy@plt>:
    1250:	f3 0f 1e fa          	endbr64 
    1254:	f2 ff 25 dd 3c 00 00 	bnd jmp *0x3cdd(%rip)        # 4f38 <memcpy@GLIBC_2.14>
    125b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001260 <sem_init@plt>:
    1260:	f3 0f 1e fa          	endbr64 
    1264:	f2 ff 25 d5 3c 00 00 	bnd jmp *0x3cd5(%rip)        # 4f40 <sem_init@GLIBC_2.34>
    126b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001270 <__cxa_atexit@plt>:
    1270:	f3 0f 1e fa          	endbr64 
    1274:	f2 ff 25 cd 3c 00 00 	bnd jmp *0x3ccd(%rip)        # 4f48 <__cxa_atexit@GLIBC_2.2.5>
    127b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001280 <time@plt>:
    1280:	f3 0f 1e fa          	endbr64 
    1284:	f2 ff 25 c5 3c 00 00 	bnd jmp *0x3cc5(%rip)        # 4f50 <time@GLIBC_2.2.5>
    128b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001290 <srand@plt>:
    1290:	f3 0f 1e fa          	endbr64 
    1294:	f2 ff 25 bd 3c 00 00 	bnd jmp *0x3cbd(%rip)        # 4f58 <srand@GLIBC_2.2.5>
    129b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012a0 <_Znwm@plt>:
    12a0:	f3 0f 1e fa          	endbr64 
    12a4:	f2 ff 25 b5 3c 00 00 	bnd jmp *0x3cb5(%rip)        # 4f60 <_Znwm@GLIBCXX_3.4>
    12ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012b0 <_ZdlPvm@plt>:
    12b0:	f3 0f 1e fa          	endbr64 
    12b4:	f2 ff 25 ad 3c 00 00 	bnd jmp *0x3cad(%rip)        # 4f68 <_ZdlPvm@CXXABI_1.3.9>
    12bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012c0 <__stack_chk_fail@plt>:
    12c0:	f3 0f 1e fa          	endbr64 
    12c4:	f2 ff 25 a5 3c 00 00 	bnd jmp *0x3ca5(%rip)        # 4f70 <__stack_chk_fail@GLIBC_2.4>
    12cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012d0 <tcgetattr@plt>:
    12d0:	f3 0f 1e fa          	endbr64 
    12d4:	f2 ff 25 9d 3c 00 00 	bnd jmp *0x3c9d(%rip)        # 4f78 <tcgetattr@GLIBC_2.2.5>
    12db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012e0 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>:
    12e0:	f3 0f 1e fa          	endbr64 
    12e4:	f2 ff 25 95 3c 00 00 	bnd jmp *0x3c95(%rip)        # 4f80 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@GLIBCXX_3.4.9>
    12eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000012f0 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>:
    12f0:	f3 0f 1e fa          	endbr64 
    12f4:	f2 ff 25 8d 3c 00 00 	bnd jmp *0x3c8d(%rip)        # 4f88 <_ZNKSt5ctypeIcE13_M_widen_initEv@GLIBCXX_3.4.11>
    12fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001300 <_ZSt16__throw_bad_castv@plt>:
    1300:	f3 0f 1e fa          	endbr64 
    1304:	f2 ff 25 85 3c 00 00 	bnd jmp *0x3c85(%rip)        # 4f90 <_ZSt16__throw_bad_castv@GLIBCXX_3.4>
    130b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001310 <tcsetattr@plt>:
    1310:	f3 0f 1e fa          	endbr64 
    1314:	f2 ff 25 7d 3c 00 00 	bnd jmp *0x3c7d(%rip)        # 4f98 <tcsetattr@GLIBC_2.2.5>
    131b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001320 <usleep@plt>:
    1320:	f3 0f 1e fa          	endbr64 
    1324:	f2 ff 25 75 3c 00 00 	bnd jmp *0x3c75(%rip)        # 4fa0 <usleep@GLIBC_2.2.5>
    132b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001330 <_ZNSt8ios_base4InitC1Ev@plt>:
    1330:	f3 0f 1e fa          	endbr64 
    1334:	f2 ff 25 6d 3c 00 00 	bnd jmp *0x3c6d(%rip)        # 4fa8 <_ZNSt8ios_base4InitC1Ev@GLIBCXX_3.4>
    133b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001340 <sem_post@plt>:
    1340:	f3 0f 1e fa          	endbr64 
    1344:	f2 ff 25 65 3c 00 00 	bnd jmp *0x3c65(%rip)        # 4fb0 <sem_post@GLIBC_2.34>
    134b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001350 <_ZNSolsEi@plt>:
    1350:	f3 0f 1e fa          	endbr64 
    1354:	f2 ff 25 5d 3c 00 00 	bnd jmp *0x3c5d(%rip)        # 4fb8 <_ZNSolsEi@GLIBCXX_3.4>
    135b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001360 <_Unwind_Resume@plt>:
    1360:	f3 0f 1e fa          	endbr64 
    1364:	f2 ff 25 55 3c 00 00 	bnd jmp *0x3c55(%rip)        # 4fc0 <_Unwind_Resume@GCC_3.0>
    136b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001370 <pthread_create@plt>:
    1370:	f3 0f 1e fa          	endbr64 
    1374:	f2 ff 25 4d 3c 00 00 	bnd jmp *0x3c4d(%rip)        # 4fc8 <pthread_create@GLIBC_2.34>
    137b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

0000000000001380 <_ZN8SnakeMap6redrawEv.cold>:
      _GLIBCXX20_CONSTEXPR
      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
    1380:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
    1386:	74 0f                	je     1397 <_ZN8SnakeMap6redrawEv.cold+0x17>
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1388:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    138d:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    1392:	e8 19 ff ff ff       	call   12b0 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    1397:	48 89 df             	mov    %rbx,%rdi
    139a:	e8 c1 ff ff ff       	call   1360 <_Unwind_Resume@plt>
    139f:	90                   	nop

00000000000013a0 <_ZN5SnakeC2Ev.cold>:
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    13a0:	48 8b 3b             	mov    (%rbx),%rdi
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    13a3:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    13a7:	48 29 fe             	sub    %rdi,%rsi
	if (__p)
    13aa:	48 85 ff             	test   %rdi,%rdi
    13ad:	74 05                	je     13b4 <_ZN5SnakeC2Ev.cold+0x14>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    13af:	e8 fc fe ff ff       	call   12b0 <_ZdlPvm@plt>
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    13b4:	48 89 ef             	mov    %rbp,%rdi
    13b7:	e8 a4 ff ff ff       	call   1360 <_Unwind_Resume@plt>
    13bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000013c0 <main>:
        snake.validate_direction();
    }
}

int main()
{
    13c0:	f3 0f 1e fa          	endbr64 
    13c4:	48 83 ec 08          	sub    $0x8,%rsp
    input_init();
    13c8:	e8 53 0c 00 00       	call   2020 <_Z10input_initv>
    input_enter_off();
    13cd:	e8 6e 0a 00 00       	call   1e40 <_Z15input_enter_offv>
    initialize();
    start_game();
    13d2:	e8 d9 02 00 00       	call   16b0 <_Z10start_gamev>
    return 0;
}
    13d7:	31 c0                	xor    %eax,%eax
    13d9:	48 83 c4 08          	add    $0x8,%rsp
    13dd:	c3                   	ret    
    13de:	66 90                	xchg   %ax,%ax

00000000000013e0 <_GLOBAL__sub_I_snake>:
    13e0:	f3 0f 1e fa          	endbr64 
    13e4:	55                   	push   %rbp
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  ///@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    13e5:	48 8d 2d 1c 3c 00 00 	lea    0x3c1c(%rip),%rbp        # 5008 <__dso_handle>
    13ec:	53                   	push   %rbx
    13ed:	48 8d 1d ec 45 00 00 	lea    0x45ec(%rip),%rbx        # 59e0 <_ZStL8__ioinit>
    13f4:	48 89 df             	mov    %rbx,%rdi
    13f7:	48 83 ec 08          	sub    $0x8,%rsp
    13fb:	e8 30 ff ff ff       	call   1330 <_ZNSt8ios_base4InitC1Ev@plt>
    1400:	48 8b 3d f1 3b 00 00 	mov    0x3bf1(%rip),%rdi        # 4ff8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    1407:	48 89 ea             	mov    %rbp,%rdx
    140a:	48 89 de             	mov    %rbx,%rsi
Snake snake;
    140d:	48 8d 1d 2c 3f 00 00 	lea    0x3f2c(%rip),%rbx        # 5340 <snake>
    1414:	e8 57 fe ff ff       	call   1270 <__cxa_atexit@plt>
    1419:	48 89 df             	mov    %rbx,%rdi
    141c:	e8 5f 11 00 00       	call   2580 <_ZN5SnakeC1Ev>
    1421:	48 89 de             	mov    %rbx,%rsi
    1424:	48 89 ea             	mov    %rbp,%rdx
    1427:	48 8d 3d f2 02 00 00 	lea    0x2f2(%rip),%rdi        # 1720 <_ZN5SnakeD1Ev>
    142e:	e8 3d fe ff ff       	call   1270 <__cxa_atexit@plt>
}
    1433:	48 83 c4 08          	add    $0x8,%rsp
SnakeMap snake_map(&snake);
    1437:	48 89 de             	mov    %rbx,%rsi
    143a:	48 8d 3d 5f 3d 00 00 	lea    0x3d5f(%rip),%rdi        # 51a0 <snake_map>
}
    1441:	5b                   	pop    %rbx
    1442:	5d                   	pop    %rbp
SnakeMap snake_map(&snake);
    1443:	e9 08 03 00 00       	jmp    1750 <_ZN8SnakeMapC1EP5Snake>
    1448:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    144f:	00 

0000000000001450 <_GLOBAL__sub_I__ZN8SnakeMapC2EP5Snake>:
}

void SnakeMap::update_score(void)
{
    cout << "Score:" << snake->length << endl;
    1450:	f3 0f 1e fa          	endbr64 
    1454:	53                   	push   %rbx
    1455:	48 8d 1d 85 45 00 00 	lea    0x4585(%rip),%rbx        # 59e1 <_ZStL8__ioinit>
    145c:	48 89 df             	mov    %rbx,%rdi
    145f:	e8 cc fe ff ff       	call   1330 <_ZNSt8ios_base4InitC1Ev@plt>
    1464:	48 8b 3d 8d 3b 00 00 	mov    0x3b8d(%rip),%rdi        # 4ff8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    146b:	48 89 de             	mov    %rbx,%rsi
    146e:	5b                   	pop    %rbx
    146f:	48 8d 15 92 3b 00 00 	lea    0x3b92(%rip),%rdx        # 5008 <__dso_handle>
    1476:	e9 f5 fd ff ff       	jmp    1270 <__cxa_atexit@plt>
    147b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001480 <_GLOBAL__sub_I_t>:
}

void input_init()
{
    
    1480:	f3 0f 1e fa          	endbr64 
    1484:	53                   	push   %rbx
    1485:	48 8d 1d b0 45 00 00 	lea    0x45b0(%rip),%rbx        # 5a3c <_ZStL8__ioinit>
    148c:	48 89 df             	mov    %rbx,%rdi
    148f:	e8 9c fe ff ff       	call   1330 <_ZNSt8ios_base4InitC1Ev@plt>
    1494:	48 8b 3d 5d 3b 00 00 	mov    0x3b5d(%rip),%rdi        # 4ff8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    149b:	48 89 de             	mov    %rbx,%rsi
    149e:	5b                   	pop    %rbx
    149f:	48 8d 15 62 3b 00 00 	lea    0x3b62(%rip),%rdx        # 5008 <__dso_handle>
    14a6:	e9 c5 fd ff ff       	jmp    1270 <__cxa_atexit@plt>
    14ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000014b0 <_GLOBAL__sub_I__Z17input_thread_workPv>:
        pair<int, int> snake_part = make_pair(MAP_HEIGHT / 2, MAP_WIDTH / 2 - (INITIAL_SNAKE_LENGTH / 2) + i);
        snake_parts.push_back(snake_part);
        snake_world_array[snake_part.first][snake_part.second] = 1;
    }
    snake_head = snake_parts[snake_parts.size() - 1];
    14b0:	f3 0f 1e fa          	endbr64 
    14b4:	53                   	push   %rbx
    14b5:	48 8d 1d 81 45 00 00 	lea    0x4581(%rip),%rbx        # 5a3d <_ZStL8__ioinit>
    14bc:	48 89 df             	mov    %rbx,%rdi
    14bf:	e8 6c fe ff ff       	call   1330 <_ZNSt8ios_base4InitC1Ev@plt>
    14c4:	48 8b 3d 2d 3b 00 00 	mov    0x3b2d(%rip),%rdi        # 4ff8 <_ZNSt8ios_base4InitD1Ev@GLIBCXX_3.4>
    14cb:	48 89 de             	mov    %rbx,%rsi
    14ce:	5b                   	pop    %rbx
    14cf:	48 8d 15 32 3b 00 00 	lea    0x3b32(%rip),%rdx        # 5008 <__dso_handle>
    14d6:	e9 95 fd ff ff       	jmp    1270 <__cxa_atexit@plt>
    14db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000014e0 <_start>:
    14e0:	f3 0f 1e fa          	endbr64 
    14e4:	31 ed                	xor    %ebp,%ebp
    14e6:	49 89 d1             	mov    %rdx,%r9
    14e9:	5e                   	pop    %rsi
    14ea:	48 89 e2             	mov    %rsp,%rdx
    14ed:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    14f1:	50                   	push   %rax
    14f2:	54                   	push   %rsp
    14f3:	45 31 c0             	xor    %r8d,%r8d
    14f6:	31 c9                	xor    %ecx,%ecx
    14f8:	48 8d 3d c1 fe ff ff 	lea    -0x13f(%rip),%rdi        # 13c0 <main>
    14ff:	ff 15 d3 3a 00 00    	call   *0x3ad3(%rip)        # 4fd8 <__libc_start_main@GLIBC_2.34>
    1505:	f4                   	hlt    
    1506:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    150d:	00 00 00 

0000000000001510 <deregister_tm_clones>:
    1510:	48 8d 3d 01 3b 00 00 	lea    0x3b01(%rip),%rdi        # 5018 <__TMC_END__>
    1517:	48 8d 05 fa 3a 00 00 	lea    0x3afa(%rip),%rax        # 5018 <__TMC_END__>
    151e:	48 39 f8             	cmp    %rdi,%rax
    1521:	74 15                	je     1538 <deregister_tm_clones+0x28>
    1523:	48 8b 05 b6 3a 00 00 	mov    0x3ab6(%rip),%rax        # 4fe0 <_ITM_deregisterTMCloneTable@Base>
    152a:	48 85 c0             	test   %rax,%rax
    152d:	74 09                	je     1538 <deregister_tm_clones+0x28>
    152f:	ff e0                	jmp    *%rax
    1531:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1538:	c3                   	ret    
    1539:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001540 <register_tm_clones>:
    1540:	48 8d 3d d1 3a 00 00 	lea    0x3ad1(%rip),%rdi        # 5018 <__TMC_END__>
    1547:	48 8d 35 ca 3a 00 00 	lea    0x3aca(%rip),%rsi        # 5018 <__TMC_END__>
    154e:	48 29 fe             	sub    %rdi,%rsi
    1551:	48 89 f0             	mov    %rsi,%rax
    1554:	48 c1 ee 3f          	shr    $0x3f,%rsi
    1558:	48 c1 f8 03          	sar    $0x3,%rax
    155c:	48 01 c6             	add    %rax,%rsi
    155f:	48 d1 fe             	sar    %rsi
    1562:	74 14                	je     1578 <register_tm_clones+0x38>
    1564:	48 8b 05 85 3a 00 00 	mov    0x3a85(%rip),%rax        # 4ff0 <_ITM_registerTMCloneTable@Base>
    156b:	48 85 c0             	test   %rax,%rax
    156e:	74 08                	je     1578 <register_tm_clones+0x38>
    1570:	ff e0                	jmp    *%rax
    1572:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1578:	c3                   	ret    
    1579:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001580 <__do_global_dtors_aux>:
    1580:	f3 0f 1e fa          	endbr64 
    1584:	80 3d 05 3c 00 00 00 	cmpb   $0x0,0x3c05(%rip)        # 5190 <completed.0>
    158b:	75 2b                	jne    15b8 <__do_global_dtors_aux+0x38>
    158d:	55                   	push   %rbp
    158e:	48 83 3d 3a 3a 00 00 	cmpq   $0x0,0x3a3a(%rip)        # 4fd0 <__cxa_finalize@GLIBC_2.2.5>
    1595:	00 
    1596:	48 89 e5             	mov    %rsp,%rbp
    1599:	74 0c                	je     15a7 <__do_global_dtors_aux+0x27>
    159b:	48 8b 3d 66 3a 00 00 	mov    0x3a66(%rip),%rdi        # 5008 <__dso_handle>
    15a2:	e8 29 fc ff ff       	call   11d0 <__cxa_finalize@plt>
    15a7:	e8 64 ff ff ff       	call   1510 <deregister_tm_clones>
    15ac:	c6 05 dd 3b 00 00 01 	movb   $0x1,0x3bdd(%rip)        # 5190 <completed.0>
    15b3:	5d                   	pop    %rbp
    15b4:	c3                   	ret    
    15b5:	0f 1f 00             	nopl   (%rax)
    15b8:	c3                   	ret    
    15b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000015c0 <frame_dummy>:
    15c0:	f3 0f 1e fa          	endbr64 
    15c4:	e9 77 ff ff ff       	jmp    1540 <register_tm_clones>
    15c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000015d0 <_Z10initializev>:
{
    15d0:	f3 0f 1e fa          	endbr64 
    15d4:	48 83 ec 08          	sub    $0x8,%rsp
    input_init();
    15d8:	e8 43 0a 00 00       	call   2020 <_Z10input_initv>
}
    15dd:	48 83 c4 08          	add    $0x8,%rsp
    input_enter_off();
    15e1:	e9 5a 08 00 00       	jmp    1e40 <_Z15input_enter_offv>
    15e6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    15ed:	00 00 00 

00000000000015f0 <_Z11is_game_endv>:
{
    15f0:	f3 0f 1e fa          	endbr64 
    if (snake.is_dead)
    15f4:	0f b6 05 66 3d 00 00 	movzbl 0x3d66(%rip),%eax        # 5361 <snake+0x21>
    15fb:	84 c0                	test   %al,%al
    15fd:	75 16                	jne    1615 <_Z11is_game_endv+0x25>
    if (snake_head.first < 0 || snake_head.first >= MAP_HEIGHT || snake_head.second < 0 || snake_head.second >= MAP_WIDTH)
    15ff:	83 3d 52 3d 00 00 13 	cmpl   $0x13,0x3d52(%rip)        # 5358 <snake+0x18>
    1606:	0f 97 c0             	seta   %al
    1609:	83 3d 4c 3d 00 00 13 	cmpl   $0x13,0x3d4c(%rip)        # 535c <snake+0x1c>
    1610:	0f 97 c2             	seta   %dl
    1613:	09 d0                	or     %edx,%eax
}
    1615:	c3                   	ret    
    1616:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    161d:	00 00 00 

0000000000001620 <_Z9game_overv>:
{
    1620:	f3 0f 1e fa          	endbr64 
    1624:	55                   	push   %rbp
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
	__out.setstate(ios_base::badbit);
      else
	__ostream_insert(__out, __s,
    1625:	48 8d 2d 54 3a 00 00 	lea    0x3a54(%rip),%rbp        # 5080 <_ZSt4cout@GLIBCXX_3.4>
    162c:	ba 0c 00 00 00       	mov    $0xc,%edx
    1631:	48 8d 35 cc 19 00 00 	lea    0x19cc(%rip),%rsi        # 3004 <_IO_stdin_used+0x4>
    1638:	53                   	push   %rbx
    1639:	48 89 ef             	mov    %rbp,%rdi
    163c:	48 83 ec 08          	sub    $0x8,%rsp
    1640:	e8 9b fc ff ff       	call   12e0 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
   *  for more on this subject.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
    1645:	48 8b 05 34 3a 00 00 	mov    0x3a34(%rip),%rax        # 5080 <_ZSt4cout@GLIBCXX_3.4>
    164c:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    1650:	48 8b 9c 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbx
    1657:	00 

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
    1658:	48 85 db             	test   %rbx,%rbx
    165b:	74 4d                	je     16aa <_Z9game_overv+0x8a>
       *  @return  The converted character.
      */
      char_type
      widen(char __c) const
      {
	if (_M_widen_ok)
    165d:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    1661:	74 1d                	je     1680 <_Z9game_overv+0x60>
    1663:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    1667:	48 89 ef             	mov    %rbp,%rdi
    166a:	e8 71 fb ff ff       	call   11e0 <_ZNSo3putEc@plt>
}
    166f:	48 83 c4 08          	add    $0x8,%rsp
    1673:	5b                   	pop    %rbx
    1674:	48 89 c7             	mov    %rax,%rdi
    1677:	5d                   	pop    %rbp
   *  This manipulator simply calls the stream's @c flush() member function.
  */
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
    1678:	e9 b3 fb ff ff       	jmp    1230 <_ZNSo5flushEv@plt>
    167d:	0f 1f 00             	nopl   (%rax)
	  return _M_widen[static_cast<unsigned char>(__c)];
	this->_M_widen_init();
    1680:	48 89 df             	mov    %rbx,%rdi
    1683:	e8 68 fc ff ff       	call   12f0 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    1688:	48 8b 03             	mov    (%rbx),%rax
    168b:	be 0a 00 00 00       	mov    $0xa,%esi
    1690:	48 8d 15 79 00 00 00 	lea    0x79(%rip),%rdx        # 1710 <_ZNKSt5ctypeIcE8do_widenEc>
    1697:	48 8b 40 30          	mov    0x30(%rax),%rax
    169b:	48 39 d0             	cmp    %rdx,%rax
    169e:	74 c7                	je     1667 <_Z9game_overv+0x47>
    16a0:	48 89 df             	mov    %rbx,%rdi
    16a3:	ff d0                	call   *%rax
    { return flush(__os.put(__os.widen('\n'))); }
    16a5:	0f be f0             	movsbl %al,%esi
    16a8:	eb bd                	jmp    1667 <_Z9game_overv+0x47>
	__throw_bad_cast();
    16aa:	e8 51 fc ff ff       	call   1300 <_ZSt16__throw_bad_castv@plt>
    16af:	90                   	nop

00000000000016b0 <_Z10start_gamev>:
{
    16b0:	f3 0f 1e fa          	endbr64 
    16b4:	53                   	push   %rbx
    16b5:	48 8d 1d 84 3c 00 00 	lea    0x3c84(%rip),%rbx        # 5340 <snake>
        snake.update_movement();
    16bc:	48 89 df             	mov    %rbx,%rdi
    16bf:	e8 5c 0b 00 00       	call   2220 <_ZN5Snake15update_movementEv>
    if (snake_head.first < 0 || snake_head.first >= MAP_HEIGHT || snake_head.second < 0 || snake_head.second >= MAP_WIDTH)
    16c4:	83 3d 8d 3c 00 00 13 	cmpl   $0x13,0x3c8d(%rip)        # 5358 <snake+0x18>
    16cb:	77 09                	ja     16d6 <_Z10start_gamev+0x26>
    16cd:	83 3d 88 3c 00 00 13 	cmpl   $0x13,0x3c88(%rip)        # 535c <snake+0x1c>
    16d4:	76 0a                	jbe    16e0 <_Z10start_gamev+0x30>
}
    16d6:	5b                   	pop    %rbx
            game_over();
    16d7:	e9 44 ff ff ff       	jmp    1620 <_Z9game_overv>
    16dc:	0f 1f 40 00          	nopl   0x0(%rax)
    if (snake.is_dead)
    16e0:	80 3d 7a 3c 00 00 00 	cmpb   $0x0,0x3c7a(%rip)        # 5361 <snake+0x21>
    16e7:	75 ed                	jne    16d6 <_Z10start_gamev+0x26>
        snake_map.redraw();
    16e9:	48 8d 3d b0 3a 00 00 	lea    0x3ab0(%rip),%rdi        # 51a0 <snake_map>
    16f0:	e8 1b 03 00 00       	call   1a10 <_ZN8SnakeMap6redrawEv>
        usleep(PAUSE_LENGTH);
    16f5:	bf 40 0d 03 00       	mov    $0x30d40,%edi
    16fa:	e8 21 fc ff ff       	call   1320 <usleep@plt>
        snake.validate_direction();
    16ff:	48 89 df             	mov    %rbx,%rdi
    1702:	e8 39 0a 00 00       	call   2140 <_ZN5Snake18validate_directionEv>
        snake.update_movement();
    1707:	eb b3                	jmp    16bc <_Z10start_gamev+0xc>
    1709:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001710 <_ZNKSt5ctypeIcE8do_widenEc>:
       *
       *  @param __c  The char to convert.
       *  @return  The converted character.
      */
      virtual char_type
      do_widen(char __c) const
    1710:	f3 0f 1e fa          	endbr64 
    1714:	89 f0                	mov    %esi,%eax
      { return __c; }
    1716:	c3                   	ret    
    1717:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    171e:	00 00 

0000000000001720 <_ZN5SnakeD1Ev>:
#include <utility>
#include "macros.h"

using namespace std;

class Snake
    1720:	f3 0f 1e fa          	endbr64 
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    1724:	48 8b 07             	mov    (%rdi),%rax
	if (__p)
    1727:	48 85 c0             	test   %rax,%rax
    172a:	74 14                	je     1740 <_ZN5SnakeD1Ev+0x20>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
    172c:	48 8b 77 10          	mov    0x10(%rdi),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1730:	48 89 c7             	mov    %rax,%rdi
    1733:	48 29 c6             	sub    %rax,%rsi
    1736:	e9 75 fb ff ff       	jmp    12b0 <_ZdlPvm@plt>
    173b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    1740:	c3                   	ret    
    1741:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1748:	00 00 00 
    174b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001750 <_ZN8SnakeMapC1EP5Snake>:
SnakeMap::SnakeMap(Snake *snake)
    1750:	f3 0f 1e fa          	endbr64 
            map_array[i][j] = MAP_CHAR;
    1754:	48 b8 2e 2e 2e 2e 2e 	movabs $0x2e2e2e2e2e2e2e2e,%rax
    175b:	2e 2e 2e 
SnakeMap::SnakeMap(Snake *snake)
    175e:	55                   	push   %rbp
    175f:	48 89 fd             	mov    %rdi,%rbp
            map_array[i][j] = MAP_CHAR;
    1762:	48 8d 7f 10          	lea    0x10(%rdi),%rdi
SnakeMap::SnakeMap(Snake *snake)
    1766:	53                   	push   %rbx
            map_array[i][j] = MAP_CHAR;
    1767:	89 ea                	mov    %ebp,%edx
SnakeMap::SnakeMap(Snake *snake)
    1769:	48 83 ec 08          	sub    $0x8,%rsp
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>
      constexpr pair()
      : first(), second() { }
    176d:	48 c7 47 f0 00 00 00 	movq   $0x0,-0x10(%rdi)
    1774:	00 
    this->snake = snake;
    1775:	48 89 b7 88 01 00 00 	mov    %rsi,0x188(%rdi)
            map_array[i][j] = MAP_CHAR;
    177c:	48 89 47 f8          	mov    %rax,-0x8(%rdi)
    1780:	48 89 87 80 01 00 00 	mov    %rax,0x180(%rdi)
    1787:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    178b:	29 fa                	sub    %edi,%edx
    178d:	8d 8a 98 01 00 00    	lea    0x198(%rdx),%ecx
    1793:	c1 e9 03             	shr    $0x3,%ecx
    1796:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    srand(time(NULL));
    1799:	31 ff                	xor    %edi,%edi
    179b:	e8 e0 fa ff ff       	call   1280 <time@plt>
    17a0:	89 c7                	mov    %eax,%edi
    17a2:	e8 e9 fa ff ff       	call   1290 <srand@plt>
void SnakeMap::update_snake_food(bool force_update)
    17a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    17ae:	00 00 
            int random_i = rand() % MAP_WIDTH;
    17b0:	e8 3b fa ff ff       	call   11f0 <rand@plt>
    17b5:	48 63 d8             	movslq %eax,%rbx
    17b8:	99                   	cltd   
    17b9:	48 69 db 67 66 66 66 	imul   $0x66666667,%rbx,%rbx
    17c0:	48 c1 fb 23          	sar    $0x23,%rbx
    17c4:	29 d3                	sub    %edx,%ebx
    17c6:	8d 14 9b             	lea    (%rbx,%rbx,4),%edx
    17c9:	c1 e2 02             	shl    $0x2,%edx
    17cc:	29 d0                	sub    %edx,%eax
    17ce:	89 c3                	mov    %eax,%ebx
            int random_j = rand() % MAP_HEIGHT;
    17d0:	e8 1b fa ff ff       	call   11f0 <rand@plt>
    17d5:	48 63 d0             	movslq %eax,%rdx
    17d8:	89 c1                	mov    %eax,%ecx
    17da:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
    17e1:	c1 f9 1f             	sar    $0x1f,%ecx
    17e4:	48 c1 fa 23          	sar    $0x23,%rdx
    17e8:	29 ca                	sub    %ecx,%edx
    17ea:	8d 0c 92             	lea    (%rdx,%rdx,4),%ecx
    17ed:	c1 e1 02             	shl    $0x2,%ecx
    17f0:	29 c8                	sub    %ecx,%eax
    17f2:	48 63 c8             	movslq %eax,%rcx
            if (map_array[random_i][random_j] == MAP_CHAR)
    17f5:	48 63 c3             	movslq %ebx,%rax
    17f8:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
    17fc:	48 8d 44 85 00       	lea    0x0(%rbp,%rax,4),%rax
    1801:	80 7c 01 08 2e       	cmpb   $0x2e,0x8(%rcx,%rax,1)
    1806:	75 a8                	jne    17b0 <_ZN8SnakeMapC1EP5Snake+0x60>
				       is_move_assignable<_T2>>::value,
				pair&&, __nonesuch&&> __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
		      is_nothrow_move_assignable<_T2>>::value)
      {
	first = std::forward<first_type>(__p.first);
    1808:	89 5d 00             	mov    %ebx,0x0(%rbp)
                snake->set_snake_food(snake_food);
    180b:	48 8b bd 98 01 00 00 	mov    0x198(%rbp),%rdi
	second = std::forward<second_type>(__p.second);
    1812:	89 4d 04             	mov    %ecx,0x4(%rbp)
    1815:	48 8b 75 00          	mov    0x0(%rbp),%rsi
    1819:	e8 b2 09 00 00       	call   21d0 <_ZN5Snake14set_snake_foodESt4pairIiiE>
                snake->food_eaten = false;
    181e:	48 8b 85 98 01 00 00 	mov    0x198(%rbp),%rax
    1825:	c6 40 20 00          	movb   $0x0,0x20(%rax)
}
    1829:	48 83 c4 08          	add    $0x8,%rsp
    182d:	5b                   	pop    %rbx
    182e:	5d                   	pop    %rbp
    182f:	c3                   	ret    

0000000000001830 <_ZN8SnakeMap17update_snake_foodEb>:
{
    1830:	f3 0f 1e fa          	endbr64 
    1834:	55                   	push   %rbp
    1835:	48 89 fd             	mov    %rdi,%rbp
    1838:	53                   	push   %rbx
    1839:	48 83 ec 08          	sub    $0x8,%rsp
    if (snake->food_eaten || force_update)
    183d:	48 8b 87 98 01 00 00 	mov    0x198(%rdi),%rax
    1844:	80 78 20 00          	cmpb   $0x0,0x20(%rax)
    1848:	75 06                	jne    1850 <_ZN8SnakeMap17update_snake_foodEb+0x20>
    184a:	40 84 f6             	test   %sil,%sil
    184d:	74 7a                	je     18c9 <_ZN8SnakeMap17update_snake_foodEb+0x99>
    184f:	90                   	nop
            int random_i = rand() % MAP_WIDTH;
    1850:	e8 9b f9 ff ff       	call   11f0 <rand@plt>
    1855:	48 63 d8             	movslq %eax,%rbx
    1858:	99                   	cltd   
    1859:	48 69 db 67 66 66 66 	imul   $0x66666667,%rbx,%rbx
    1860:	48 c1 fb 23          	sar    $0x23,%rbx
    1864:	29 d3                	sub    %edx,%ebx
    1866:	8d 14 9b             	lea    (%rbx,%rbx,4),%edx
    1869:	c1 e2 02             	shl    $0x2,%edx
    186c:	29 d0                	sub    %edx,%eax
    186e:	89 c3                	mov    %eax,%ebx
            int random_j = rand() % MAP_HEIGHT;
    1870:	e8 7b f9 ff ff       	call   11f0 <rand@plt>
    1875:	48 63 d0             	movslq %eax,%rdx
    1878:	89 c1                	mov    %eax,%ecx
    187a:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
    1881:	c1 f9 1f             	sar    $0x1f,%ecx
    1884:	48 c1 fa 23          	sar    $0x23,%rdx
    1888:	29 ca                	sub    %ecx,%edx
    188a:	8d 0c 92             	lea    (%rdx,%rdx,4),%ecx
    188d:	c1 e1 02             	shl    $0x2,%ecx
    1890:	29 c8                	sub    %ecx,%eax
    1892:	48 63 c8             	movslq %eax,%rcx
            if (map_array[random_i][random_j] == MAP_CHAR)
    1895:	48 63 c3             	movslq %ebx,%rax
    1898:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
    189c:	48 8d 44 85 00       	lea    0x0(%rbp,%rax,4),%rax
    18a1:	80 7c 01 08 2e       	cmpb   $0x2e,0x8(%rcx,%rax,1)
    18a6:	75 a8                	jne    1850 <_ZN8SnakeMap17update_snake_foodEb+0x20>
	first = std::forward<first_type>(__p.first);
    18a8:	89 5d 00             	mov    %ebx,0x0(%rbp)
                snake->set_snake_food(snake_food);
    18ab:	48 8b bd 98 01 00 00 	mov    0x198(%rbp),%rdi
	second = std::forward<second_type>(__p.second);
    18b2:	89 4d 04             	mov    %ecx,0x4(%rbp)
    18b5:	48 8b 75 00          	mov    0x0(%rbp),%rsi
    18b9:	e8 12 09 00 00       	call   21d0 <_ZN5Snake14set_snake_foodESt4pairIiiE>
                snake->food_eaten = false;
    18be:	48 8b 85 98 01 00 00 	mov    0x198(%rbp),%rax
    18c5:	c6 40 20 00          	movb   $0x0,0x20(%rax)
}
    18c9:	48 83 c4 08          	add    $0x8,%rsp
    18cd:	5b                   	pop    %rbx
    18ce:	5d                   	pop    %rbp
    18cf:	c3                   	ret    

00000000000018d0 <_Z9clear_mapPA20_c>:
{
    18d0:	f3 0f 1e fa          	endbr64 
            map_array[i][j] = MAP_CHAR;
    18d4:	48 b8 2e 2e 2e 2e 2e 	movabs $0x2e2e2e2e2e2e2e2e,%rax
    18db:	2e 2e 2e 
{
    18de:	48 89 fa             	mov    %rdi,%rdx
            map_array[i][j] = MAP_CHAR;
    18e1:	48 8d 7f 08          	lea    0x8(%rdi),%rdi
    18e5:	48 89 47 f8          	mov    %rax,-0x8(%rdi)
    18e9:	48 89 87 80 01 00 00 	mov    %rax,0x180(%rdi)
    18f0:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    18f4:	48 29 fa             	sub    %rdi,%rdx
    18f7:	8d 8a 90 01 00 00    	lea    0x190(%rdx),%ecx
    18fd:	c1 e9 03             	shr    $0x3,%ecx
    1900:	f3 48 ab             	rep stos %rax,%es:(%rdi)
}
    1903:	c3                   	ret    
    1904:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    190b:	00 00 00 00 
    190f:	90                   	nop

0000000000001910 <_Z17update_snake_headPA20_cP5Snake>:
{
    1910:	f3 0f 1e fa          	endbr64 
    1914:	55                   	push   %rbp
    1915:	48 89 fd             	mov    %rdi,%rbp
    enum Direction direction = snake->get_direction();
    1918:	48 89 f7             	mov    %rsi,%rdi
{
    191b:	53                   	push   %rbx
    191c:	48 89 f3             	mov    %rsi,%rbx
    191f:	48 83 ec 08          	sub    $0x8,%rsp
    enum Direction direction = snake->get_direction();
    1923:	e8 e8 07 00 00       	call   2110 <_ZN5Snake13get_directionEv>
    switch (direction)
    1928:	ba 4f 00 00 00       	mov    $0x4f,%edx
    192d:	83 f8 03             	cmp    $0x3,%eax
    1930:	77 0d                	ja     193f <_Z17update_snake_headPA20_cP5Snake+0x2f>
    1932:	89 c0                	mov    %eax,%eax
    1934:	48 8d 15 df 16 00 00 	lea    0x16df(%rip),%rdx        # 301a <CSWTCH.32>
    193b:	0f b6 14 02          	movzbl (%rdx,%rax,1),%edx
    map_array[snake_head.first][snake_head.second] = snake_head_char;
    193f:	48 63 43 18          	movslq 0x18(%rbx),%rax
    1943:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
    1947:	48 8d 4c 85 00       	lea    0x0(%rbp,%rax,4),%rcx
    194c:	48 63 43 1c          	movslq 0x1c(%rbx),%rax
    1950:	88 14 01             	mov    %dl,(%rcx,%rax,1)
}
    1953:	48 83 c4 08          	add    $0x8,%rsp
    1957:	5b                   	pop    %rbx
    1958:	5d                   	pop    %rbp
    1959:	c3                   	ret    
    195a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001960 <_ZN8SnakeMap12update_scoreEv>:
{
    1960:	f3 0f 1e fa          	endbr64 
    1964:	55                   	push   %rbp
	__ostream_insert(__out, __s,
    1965:	48 8d 2d 14 37 00 00 	lea    0x3714(%rip),%rbp        # 5080 <_ZSt4cout@GLIBCXX_3.4>
    196c:	ba 06 00 00 00       	mov    $0x6,%edx
    1971:	48 8d 35 99 16 00 00 	lea    0x1699(%rip),%rsi        # 3011 <_IO_stdin_used+0x11>
    1978:	53                   	push   %rbx
    1979:	48 89 fb             	mov    %rdi,%rbx
    197c:	48 89 ef             	mov    %rbp,%rdi
    197f:	48 83 ec 08          	sub    $0x8,%rsp
    1983:	e8 58 f9 ff ff       	call   12e0 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    cout << "Score:" << snake->length << endl;
    1988:	48 8b 83 98 01 00 00 	mov    0x198(%rbx),%rax
    198f:	48 89 ef             	mov    %rbp,%rdi
    1992:	8b 70 24             	mov    0x24(%rax),%esi
    1995:	e8 b6 f9 ff ff       	call   1350 <_ZNSolsEi@plt>
    199a:	48 89 c3             	mov    %rax,%rbx
    { return flush(__os.put(__os.widen('\n'))); }
    199d:	48 8b 00             	mov    (%rax),%rax
    19a0:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    19a4:	48 8b ac 03 f0 00 00 	mov    0xf0(%rbx,%rax,1),%rbp
    19ab:	00 
      if (!__f)
    19ac:	48 85 ed             	test   %rbp,%rbp
    19af:	74 52                	je     1a03 <_ZN8SnakeMap12update_scoreEv+0xa3>
	if (_M_widen_ok)
    19b1:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    19b5:	74 21                	je     19d8 <_ZN8SnakeMap12update_scoreEv+0x78>
    19b7:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    19bb:	48 89 df             	mov    %rbx,%rdi
    19be:	e8 1d f8 ff ff       	call   11e0 <_ZNSo3putEc@plt>
    19c3:	48 83 c4 08          	add    $0x8,%rsp
    19c7:	5b                   	pop    %rbx
    19c8:	48 89 c7             	mov    %rax,%rdi
    19cb:	5d                   	pop    %rbp
    { return __os.flush(); }
    19cc:	e9 5f f8 ff ff       	jmp    1230 <_ZNSo5flushEv@plt>
    19d1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	this->_M_widen_init();
    19d8:	48 89 ef             	mov    %rbp,%rdi
    19db:	e8 10 f9 ff ff       	call   12f0 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    19e0:	48 8b 45 00          	mov    0x0(%rbp),%rax
    19e4:	be 0a 00 00 00       	mov    $0xa,%esi
    19e9:	48 8d 15 20 fd ff ff 	lea    -0x2e0(%rip),%rdx        # 1710 <_ZNKSt5ctypeIcE8do_widenEc>
    19f0:	48 8b 40 30          	mov    0x30(%rax),%rax
    19f4:	48 39 d0             	cmp    %rdx,%rax
    19f7:	74 c2                	je     19bb <_ZN8SnakeMap12update_scoreEv+0x5b>
    19f9:	48 89 ef             	mov    %rbp,%rdi
    19fc:	ff d0                	call   *%rax
    { return flush(__os.put(__os.widen('\n'))); }
    19fe:	0f be f0             	movsbl %al,%esi
    1a01:	eb b8                	jmp    19bb <_ZN8SnakeMap12update_scoreEv+0x5b>
	__throw_bad_cast();
    1a03:	e8 f8 f8 ff ff       	call   1300 <_ZSt16__throw_bad_castv@plt>
    1a08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    1a0f:	00 

0000000000001a10 <_ZN8SnakeMap6redrawEv>:
{
    1a10:	f3 0f 1e fa          	endbr64 
    1a14:	41 57                	push   %r15
    1a16:	4c 8d 3d f3 fc ff ff 	lea    -0x30d(%rip),%r15        # 1710 <_ZNKSt5ctypeIcE8do_widenEc>
    1a1d:	41 56                	push   %r14
            map_array[i][j] = MAP_CHAR;
    1a1f:	41 be 1e 00 00 00    	mov    $0x1e,%r14d
{
    1a25:	41 55                	push   %r13
    1a27:	49 89 fd             	mov    %rdi,%r13
    1a2a:	41 54                	push   %r12
    clear_map(this->map_array);
    1a2c:	4c 8d 67 08          	lea    0x8(%rdi),%r12
            map_array[i][j] = MAP_CHAR;
    1a30:	48 8d 7f 10          	lea    0x10(%rdi),%rdi
{
    1a34:	55                   	push   %rbp
            map_array[i][j] = MAP_CHAR;
    1a35:	4c 89 e1             	mov    %r12,%rcx
    1a38:	48 8d 2d 41 36 00 00 	lea    0x3641(%rip),%rbp        # 5080 <_ZSt4cout@GLIBCXX_3.4>
{
    1a3f:	53                   	push   %rbx
    1a40:	48 83 ec 38          	sub    $0x38,%rsp
    1a44:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1a4b:	00 00 
    1a4d:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    1a52:	31 c0                	xor    %eax,%eax
            map_array[i][j] = MAP_CHAR;
    1a54:	48 b8 2e 2e 2e 2e 2e 	movabs $0x2e2e2e2e2e2e2e2e,%rax
    1a5b:	2e 2e 2e 
    1a5e:	48 89 47 f8          	mov    %rax,-0x8(%rdi)
    1a62:	48 89 87 80 01 00 00 	mov    %rax,0x180(%rdi)
    1a69:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    1a6d:	48 29 f9             	sub    %rdi,%rcx
    1a70:	81 c1 90 01 00 00    	add    $0x190,%ecx
    1a76:	c1 e9 03             	shr    $0x3,%ecx
    1a79:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    1a7c:	eb 1c                	jmp    1a9a <_ZN8SnakeMap6redrawEv+0x8a>
    1a7e:	66 90                	xchg   %ax,%ax
    1a80:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    1a84:	48 89 ef             	mov    %rbp,%rdi
    1a87:	e8 54 f7 ff ff       	call   11e0 <_ZNSo3putEc@plt>
    1a8c:	48 89 c7             	mov    %rax,%rdi
    { return __os.flush(); }
    1a8f:	e8 9c f7 ff ff       	call   1230 <_ZNSo5flushEv@plt>
    for (int i = 0; i < MAP_END; i++)
    1a94:	41 83 ee 01          	sub    $0x1,%r14d
    1a98:	74 42                	je     1adc <_ZN8SnakeMap6redrawEv+0xcc>
    { return flush(__os.put(__os.widen('\n'))); }
    1a9a:	48 8b 45 00          	mov    0x0(%rbp),%rax
    1a9e:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    1aa2:	48 8b 9c 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbx
    1aa9:	00 
      if (!__f)
    1aaa:	48 85 db             	test   %rbx,%rbx
    1aad:	0f 84 6d 03 00 00    	je     1e20 <_ZN8SnakeMap6redrawEv+0x410>
	if (_M_widen_ok)
    1ab3:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    1ab7:	75 c7                	jne    1a80 <_ZN8SnakeMap6redrawEv+0x70>
	this->_M_widen_init();
    1ab9:	48 89 df             	mov    %rbx,%rdi
    1abc:	e8 2f f8 ff ff       	call   12f0 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    1ac1:	48 8b 03             	mov    (%rbx),%rax
    1ac4:	be 0a 00 00 00       	mov    $0xa,%esi
    1ac9:	48 8b 40 30          	mov    0x30(%rax),%rax
    1acd:	4c 39 f8             	cmp    %r15,%rax
    1ad0:	74 b2                	je     1a84 <_ZN8SnakeMap6redrawEv+0x74>
    1ad2:	48 89 df             	mov    %rbx,%rdi
    1ad5:	ff d0                	call   *%rax
    1ad7:	0f be f0             	movsbl %al,%esi
    1ada:	eb a8                	jmp    1a84 <_ZN8SnakeMap6redrawEv+0x74>
    update_score();
    1adc:	4c 89 ef             	mov    %r13,%rdi
    1adf:	e8 7c fe ff ff       	call   1960 <_ZN8SnakeMap12update_scoreEv>
    vector<pair<int, int>> snake_parts = snake->snake_parts;
    1ae4:	49 8b 9d 98 01 00 00 	mov    0x198(%r13),%rbx
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1aeb:	48 8b 53 08          	mov    0x8(%rbx),%rdx
    1aef:	48 8b 0b             	mov    (%rbx),%rcx
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1af2:	48 89 d0             	mov    %rdx,%rax
    1af5:	48 29 c8             	sub    %rcx,%rax
    1af8:	0f 84 bb 02 00 00    	je     1db9 <_ZN8SnakeMap6redrawEv+0x3a9>
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    1afe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    1b03:	48 89 c1             	mov    %rax,%rcx
	if (__builtin_expect(__n > this->_M_max_size(), false))
    1b06:	48 b8 f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rax
    1b0d:	ff ff 7f 
    1b10:	48 39 c8             	cmp    %rcx,%rax
    1b13:	0f 82 ef 02 00 00    	jb     1e08 <_ZN8SnakeMap6redrawEv+0x3f8>
    1b19:	48 89 cf             	mov    %rcx,%rdi
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    1b1c:	e8 7f f7 ff ff       	call   12a0 <_Znwm@plt>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
    1b21:	48 8b 53 08          	mov    0x8(%rbx),%rdx
    1b25:	48 8b 0b             	mov    (%rbx),%rcx
    1b28:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    1b2d:	49 8b 9d 98 01 00 00 	mov    0x198(%r13),%rbx
		     _ForwardIterator __result)
    {
      _ForwardIterator __cur = __result;
      __try
	{
	  for (; __first != __last; ++__first, (void)++__cur)
    1b34:	31 c0                	xor    %eax,%eax
    1b36:	48 89 d6             	mov    %rdx,%rsi
    1b39:	48 29 ce             	sub    %rcx,%rsi
    1b3c:	48 39 d1             	cmp    %rdx,%rcx
    1b3f:	0f 84 97 02 00 00    	je     1ddc <_ZN8SnakeMap6redrawEv+0x3cc>
    1b45:	0f 1f 00             	nopl   (%rax)
	  // Allow std::_Construct to be used in constant expressions.
	  std::construct_at(__p, std::forward<_Args>(__args)...);
	  return;
	}
#endif
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
    1b48:	48 8b 14 01          	mov    (%rcx,%rax,1),%rdx
    1b4c:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    1b51:	48 89 14 07          	mov    %rdx,(%rdi,%rax,1)
    1b55:	48 83 c0 08          	add    $0x8,%rax
    1b59:	48 39 c6             	cmp    %rax,%rsi
    1b5c:	75 ea                	jne    1b48 <_ZN8SnakeMap6redrawEv+0x138>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1b5e:	48 89 f7             	mov    %rsi,%rdi
    1b61:	48 c1 ff 03          	sar    $0x3,%rdi
    for (size_t i = 0; i < snake_parts.size(); i++)
    1b65:	48 85 f6             	test   %rsi,%rsi
    1b68:	74 2b                	je     1b95 <_ZN8SnakeMap6redrawEv+0x185>
    1b6a:	31 c0                	xor    %eax,%eax
    1b6c:	0f 1f 40 00          	nopl   0x0(%rax)
        map_array[tmp.first][tmp.second] = SNAKE_CHAR;
    1b70:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
    1b75:	48 63 4c c2 04       	movslq 0x4(%rdx,%rax,8),%rcx
    1b7a:	48 63 14 c2          	movslq (%rdx,%rax,8),%rdx
    for (size_t i = 0; i < snake_parts.size(); i++)
    1b7e:	48 83 c0 01          	add    $0x1,%rax
        map_array[tmp.first][tmp.second] = SNAKE_CHAR;
    1b82:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
    1b86:	49 8d 54 95 00       	lea    0x0(%r13,%rdx,4),%rdx
    1b8b:	c6 44 11 08 4f       	movb   $0x4f,0x8(%rcx,%rdx,1)
    for (size_t i = 0; i < snake_parts.size(); i++)
    1b90:	48 39 f8             	cmp    %rdi,%rax
    1b93:	72 db                	jb     1b70 <_ZN8SnakeMap6redrawEv+0x160>
    enum Direction direction = snake->get_direction();
    1b95:	48 89 df             	mov    %rbx,%rdi
    1b98:	e8 73 05 00 00       	call   2110 <_ZN5Snake13get_directionEv>
    for (size_t i = 0; i < snake_parts.size(); i++)
    1b9d:	ba 4f 00 00 00       	mov    $0x4f,%edx
    1ba2:	83 f8 03             	cmp    $0x3,%eax
    1ba5:	77 0d                	ja     1bb4 <_ZN8SnakeMap6redrawEv+0x1a4>
    1ba7:	89 c0                	mov    %eax,%eax
    1ba9:	48 8d 15 6a 14 00 00 	lea    0x146a(%rip),%rdx        # 301a <CSWTCH.32>
    1bb0:	0f b6 14 02          	movzbl (%rdx,%rax,1),%edx
    map_array[snake_head.first][snake_head.second] = snake_head_char;
    1bb4:	48 63 43 18          	movslq 0x18(%rbx),%rax
    1bb8:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
    1bbc:	49 8d 0c 84          	lea    (%r12,%rax,4),%rcx
    1bc0:	48 63 43 1c          	movslq 0x1c(%rbx),%rax
    1bc4:	88 14 01             	mov    %dl,(%rcx,%rax,1)
    if (snake->food_eaten || force_update)
    1bc7:	49 8b 85 98 01 00 00 	mov    0x198(%r13),%rax
    1bce:	80 78 20 00          	cmpb   $0x0,0x20(%rax)
    1bd2:	0f 85 a0 00 00 00    	jne    1c78 <_ZN8SnakeMap6redrawEv+0x268>
    map_array[snake_food.first][snake_food.second] = SNAKE_FOOD_CHAR;
    1bd8:	49 63 45 00          	movslq 0x0(%r13),%rax
    1bdc:	49 63 55 04          	movslq 0x4(%r13),%rdx
    1be0:	4d 8d 65 1c          	lea    0x1c(%r13),%r12
      return __out;
    1be4:	4c 8d 3d 95 34 00 00 	lea    0x3495(%rip),%r15        # 5080 <_ZSt4cout@GLIBCXX_3.4>
    1beb:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
    1bef:	49 8d 44 85 00       	lea    0x0(%r13,%rax,4),%rax
    1bf4:	c6 44 02 08 2a       	movb   $0x2a,0x8(%rdx,%rax,1)
    for (int i = 0; i < MAP_HEIGHT; i++)
    1bf9:	49 8d 85 ac 01 00 00 	lea    0x1ac(%r13),%rax
	__ostream_insert(__out, __s,
    1c00:	4c 8d 2d 11 14 00 00 	lea    0x1411(%rip),%r13        # 3018 <_IO_stdin_used+0x18>
    1c07:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1c0c:	0f 1f 40 00          	nopl   0x0(%rax)
        for (int j = 0; j < MAP_WIDTH; j++)
    1c10:	49 8d 5c 24 ec       	lea    -0x14(%r12),%rbx
	return __ostream_insert(__out, &__c, 1);
    1c15:	4c 8d 74 24 27       	lea    0x27(%rsp),%r14
    1c1a:	eb 31                	jmp    1c4d <_ZN8SnakeMap6redrawEv+0x23d>
    1c1c:	0f 1f 40 00          	nopl   0x0(%rax)
    1c20:	ba 01 00 00 00       	mov    $0x1,%edx
    1c25:	4c 89 f6             	mov    %r14,%rsi
    1c28:	48 89 ef             	mov    %rbp,%rdi
    1c2b:	e8 b0 f6 ff ff       	call   12e0 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    1c30:	48 89 c7             	mov    %rax,%rdi
	__ostream_insert(__out, __s,
    1c33:	ba 01 00 00 00       	mov    $0x1,%edx
    1c38:	4c 89 ee             	mov    %r13,%rsi
    1c3b:	e8 a0 f6 ff ff       	call   12e0 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    1c40:	48 83 c3 01          	add    $0x1,%rbx
    1c44:	4c 39 e3             	cmp    %r12,%rbx
    1c47:	0f 84 b3 00 00 00    	je     1d00 <_ZN8SnakeMap6redrawEv+0x2f0>
      if (__out.width() != 0)
    1c4d:	48 8b 45 00          	mov    0x0(%rbp),%rax
            cout << map_array[i][j] << " ";
    1c51:	0f be 33             	movsbl (%rbx),%esi
     *
     *  <em>Minimum field width</em> refers to the number of characters.
    */
    streamsize
    width() const
    { return _M_width; }
    1c54:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    1c58:	40 88 74 24 27       	mov    %sil,0x27(%rsp)
    1c5d:	48 83 7c 05 10 00    	cmpq   $0x0,0x10(%rbp,%rax,1)
    1c63:	75 bb                	jne    1c20 <_ZN8SnakeMap6redrawEv+0x210>
      __out.put(__c);
    1c65:	48 89 ef             	mov    %rbp,%rdi
    1c68:	e8 73 f5 ff ff       	call   11e0 <_ZNSo3putEc@plt>
      return __out;
    1c6d:	4c 89 ff             	mov    %r15,%rdi
    1c70:	eb c1                	jmp    1c33 <_ZN8SnakeMap6redrawEv+0x223>
    1c72:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            int random_i = rand() % MAP_WIDTH;
    1c78:	e8 73 f5 ff ff       	call   11f0 <rand@plt>
    1c7d:	48 63 d8             	movslq %eax,%rbx
    1c80:	99                   	cltd   
    1c81:	48 69 db 67 66 66 66 	imul   $0x66666667,%rbx,%rbx
    1c88:	48 c1 fb 23          	sar    $0x23,%rbx
    1c8c:	29 d3                	sub    %edx,%ebx
    1c8e:	8d 14 9b             	lea    (%rbx,%rbx,4),%edx
    1c91:	c1 e2 02             	shl    $0x2,%edx
    1c94:	29 d0                	sub    %edx,%eax
    1c96:	89 c3                	mov    %eax,%ebx
            int random_j = rand() % MAP_HEIGHT;
    1c98:	e8 53 f5 ff ff       	call   11f0 <rand@plt>
    1c9d:	48 63 d0             	movslq %eax,%rdx
    1ca0:	89 c1                	mov    %eax,%ecx
    1ca2:	48 69 d2 67 66 66 66 	imul   $0x66666667,%rdx,%rdx
    1ca9:	c1 f9 1f             	sar    $0x1f,%ecx
    1cac:	48 c1 fa 23          	sar    $0x23,%rdx
    1cb0:	29 ca                	sub    %ecx,%edx
    1cb2:	8d 0c 92             	lea    (%rdx,%rdx,4),%ecx
    1cb5:	c1 e1 02             	shl    $0x2,%ecx
    1cb8:	29 c8                	sub    %ecx,%eax
    1cba:	48 63 c8             	movslq %eax,%rcx
            if (map_array[random_i][random_j] == MAP_CHAR)
    1cbd:	48 63 c3             	movslq %ebx,%rax
    1cc0:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
    1cc4:	49 8d 44 85 00       	lea    0x0(%r13,%rax,4),%rax
    1cc9:	80 7c 01 08 2e       	cmpb   $0x2e,0x8(%rcx,%rax,1)
    1cce:	75 a8                	jne    1c78 <_ZN8SnakeMap6redrawEv+0x268>
	first = std::forward<first_type>(__p.first);
    1cd0:	41 89 5d 00          	mov    %ebx,0x0(%r13)
                snake->set_snake_food(snake_food);
    1cd4:	49 8b bd 98 01 00 00 	mov    0x198(%r13),%rdi
	second = std::forward<second_type>(__p.second);
    1cdb:	41 89 4d 04          	mov    %ecx,0x4(%r13)
    1cdf:	49 8b 75 00          	mov    0x0(%r13),%rsi
    1ce3:	e8 e8 04 00 00       	call   21d0 <_ZN5Snake14set_snake_foodESt4pairIiiE>
                snake->food_eaten = false;
    1ce8:	49 8b 85 98 01 00 00 	mov    0x198(%r13),%rax
    1cef:	c6 40 20 00          	movb   $0x0,0x20(%rax)
                break;
    1cf3:	e9 e0 fe ff ff       	jmp    1bd8 <_ZN8SnakeMap6redrawEv+0x1c8>
    1cf8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    1cff:	00 
    { return flush(__os.put(__os.widen('\n'))); }
    1d00:	48 8b 45 00          	mov    0x0(%rbp),%rax
    1d04:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    1d08:	48 8b 9c 05 f0 00 00 	mov    0xf0(%rbp,%rax,1),%rbx
    1d0f:	00 
    1d10:	48 85 db             	test   %rbx,%rbx
    1d13:	0f 84 f4 00 00 00    	je     1e0d <_ZN8SnakeMap6redrawEv+0x3fd>
	if (_M_widen_ok)
    1d19:	80 7b 38 00          	cmpb   $0x0,0x38(%rbx)
    1d1d:	74 69                	je     1d88 <_ZN8SnakeMap6redrawEv+0x378>
    1d1f:	0f be 73 43          	movsbl 0x43(%rbx),%esi
    1d23:	48 89 ef             	mov    %rbp,%rdi
    1d26:	e8 b5 f4 ff ff       	call   11e0 <_ZNSo3putEc@plt>
    1d2b:	48 89 c7             	mov    %rax,%rdi
    { return __os.flush(); }
    1d2e:	e8 fd f4 ff ff       	call   1230 <_ZNSo5flushEv@plt>
    for (int i = 0; i < MAP_HEIGHT; i++)
    1d33:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    1d38:	49 83 c4 14          	add    $0x14,%r12
    1d3c:	49 39 c4             	cmp    %rax,%r12
    1d3f:	0f 85 cb fe ff ff    	jne    1c10 <_ZN8SnakeMap6redrawEv+0x200>
	if (__p)
    1d45:	48 83 7c 24 10 00    	cmpq   $0x0,0x10(%rsp)
    1d4b:	0f 84 98 00 00 00    	je     1de9 <_ZN8SnakeMap6redrawEv+0x3d9>
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1d51:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    1d56:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1d5d:	00 00 
    1d5f:	0f 85 ad 00 00 00    	jne    1e12 <_ZN8SnakeMap6redrawEv+0x402>
    1d65:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
    1d6a:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
}
    1d6f:	48 83 c4 38          	add    $0x38,%rsp
    1d73:	5b                   	pop    %rbx
    1d74:	5d                   	pop    %rbp
    1d75:	41 5c                	pop    %r12
    1d77:	41 5d                	pop    %r13
    1d79:	41 5e                	pop    %r14
    1d7b:	41 5f                	pop    %r15
    1d7d:	e9 2e f5 ff ff       	jmp    12b0 <_ZdlPvm@plt>
    1d82:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	this->_M_widen_init();
    1d88:	48 89 df             	mov    %rbx,%rdi
    1d8b:	e8 60 f5 ff ff       	call   12f0 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    1d90:	48 8b 03             	mov    (%rbx),%rax
    1d93:	48 8d 0d 76 f9 ff ff 	lea    -0x68a(%rip),%rcx        # 1710 <_ZNKSt5ctypeIcE8do_widenEc>
    1d9a:	be 0a 00 00 00       	mov    $0xa,%esi
    1d9f:	48 8b 40 30          	mov    0x30(%rax),%rax
    1da3:	48 39 c8             	cmp    %rcx,%rax
    1da6:	0f 84 77 ff ff ff    	je     1d23 <_ZN8SnakeMap6redrawEv+0x313>
    1dac:	48 89 df             	mov    %rbx,%rdi
    1daf:	ff d0                	call   *%rax
    { return flush(__os.put(__os.widen('\n'))); }
    1db1:	0f be f0             	movsbl %al,%esi
    1db4:	e9 6a ff ff ff       	jmp    1d23 <_ZN8SnakeMap6redrawEv+0x313>
    1db9:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
    1dc0:	00 00 
    1dc2:	48 89 d6             	mov    %rdx,%rsi
    1dc5:	31 c0                	xor    %eax,%eax
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1dc7:	48 c7 44 24 10 00 00 	movq   $0x0,0x10(%rsp)
    1dce:	00 00 
    1dd0:	48 29 ce             	sub    %rcx,%rsi
    1dd3:	48 39 d1             	cmp    %rdx,%rcx
    1dd6:	0f 85 6c fd ff ff    	jne    1b48 <_ZN8SnakeMap6redrawEv+0x138>
    enum Direction direction = snake->get_direction();
    1ddc:	48 89 df             	mov    %rbx,%rdi
    1ddf:	e8 2c 03 00 00       	call   2110 <_ZN5Snake13get_directionEv>
    1de4:	e9 b4 fd ff ff       	jmp    1b9d <_ZN8SnakeMap6redrawEv+0x18d>
}
    1de9:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    1dee:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    1df5:	00 00 
    1df7:	75 19                	jne    1e12 <_ZN8SnakeMap6redrawEv+0x402>
    1df9:	48 83 c4 38          	add    $0x38,%rsp
    1dfd:	5b                   	pop    %rbx
    1dfe:	5d                   	pop    %rbp
    1dff:	41 5c                	pop    %r12
    1e01:	41 5d                	pop    %r13
    1e03:	41 5e                	pop    %r14
    1e05:	41 5f                	pop    %r15
    1e07:	c3                   	ret    
	      std::__throw_bad_array_new_length();
    1e08:	e8 33 f4 ff ff       	call   1240 <_ZSt28__throw_bad_array_new_lengthv@plt>
	__throw_bad_cast();
    1e0d:	e8 ee f4 ff ff       	call   1300 <_ZSt16__throw_bad_castv@plt>
    1e12:	e8 a9 f4 ff ff       	call   12c0 <__stack_chk_fail@plt>
    1e17:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1e1e:	00 00 
    1e20:	e8 db f4 ff ff       	call   1300 <_ZSt16__throw_bad_castv@plt>
    1e25:	f3 0f 1e fa          	endbr64 
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    1e29:	48 89 c3             	mov    %rax,%rbx
    1e2c:	e9 57 f5 ff ff       	jmp    1388 <_ZN8SnakeMap6redrawEv.cold+0x8>
    1e31:	f3 0f 1e fa          	endbr64 
	if (__p)
    1e35:	48 89 c3             	mov    %rax,%rbx
    1e38:	e9 43 f5 ff ff       	jmp    1380 <_ZN8SnakeMap6redrawEv.cold>
    1e3d:	0f 1f 00             	nopl   (%rax)

0000000000001e40 <_Z15input_enter_offv>:
{
    1e40:	f3 0f 1e fa          	endbr64 
    1e44:	53                   	push   %rbx
    tcgetattr(STDIN_FILENO, &t);
    1e45:	48 8d 1d b4 3b 00 00 	lea    0x3bb4(%rip),%rbx        # 5a00 <t>
    1e4c:	31 ff                	xor    %edi,%edi
    1e4e:	48 89 de             	mov    %rbx,%rsi
    1e51:	e8 7a f4 ff ff       	call   12d0 <tcgetattr@plt>
    t.c_lflag &= ~ICANON;
    1e56:	83 25 af 3b 00 00 fd 	andl   $0xfffffffd,0x3baf(%rip)        # 5a0c <t+0xc>
    tcsetattr(STDIN_FILENO, TCSANOW, &t);
    1e5d:	31 f6                	xor    %esi,%esi
    1e5f:	31 ff                	xor    %edi,%edi
    1e61:	48 89 da             	mov    %rbx,%rdx
}
    1e64:	5b                   	pop    %rbx
    tcsetattr(STDIN_FILENO, TCSANOW, &t);
    1e65:	e9 a6 f4 ff ff       	jmp    1310 <tcsetattr@plt>
    1e6a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001e70 <_Z14input_enter_onv>:
{
    1e70:	f3 0f 1e fa          	endbr64 
    1e74:	53                   	push   %rbx
    tcgetattr(STDIN_FILENO, &t);
    1e75:	48 8d 1d 84 3b 00 00 	lea    0x3b84(%rip),%rbx        # 5a00 <t>
    1e7c:	31 ff                	xor    %edi,%edi
    1e7e:	48 89 de             	mov    %rbx,%rsi
    1e81:	e8 4a f4 ff ff       	call   12d0 <tcgetattr@plt>
    t.c_lflag |= ICANON;
    1e86:	83 0d 7f 3b 00 00 02 	orl    $0x2,0x3b7f(%rip)        # 5a0c <t+0xc>
    tcsetattr(STDIN_FILENO, TCSANOW, &t);
    1e8d:	31 f6                	xor    %esi,%esi
    1e8f:	31 ff                	xor    %edi,%edi
    1e91:	48 89 da             	mov    %rbx,%rdx
}
    1e94:	5b                   	pop    %rbx
    tcsetattr(STDIN_FILENO, TCSANOW, &t);
    1e95:	e9 76 f4 ff ff       	jmp    1310 <tcsetattr@plt>
    1e9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001ea0 <_Z9get_inputv>:
{
    1ea0:	f3 0f 1e fa          	endbr64 
    1ea4:	55                   	push   %rbp
    1ea5:	53                   	push   %rbx
    1ea6:	48 83 ec 18          	sub    $0x18,%rsp

/* Read a character from stdin.  */
__STDIO_INLINE int
getchar (void)
{
  return getc (stdin);
    1eaa:	48 8b 3d 8f 31 00 00 	mov    0x318f(%rip),%rdi        # 5040 <stdin@GLIBC_2.2.5>
    1eb1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    1eb8:	00 00 
    1eba:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    1ebf:	31 c0                	xor    %eax,%eax
    1ec1:	e8 3a f3 ff ff       	call   1200 <getc@plt>
    switch (user_input)
    1ec6:	3c 73                	cmp    $0x73,%al
    1ec8:	0f 84 e2 00 00 00    	je     1fb0 <_Z9get_inputv+0x110>
    1ece:	89 c3                	mov    %eax,%ebx
    1ed0:	7f 2e                	jg     1f00 <_Z9get_inputv+0x60>
    1ed2:	3c 61                	cmp    $0x61,%al
    1ed4:	0f 84 c6 00 00 00    	je     1fa0 <_Z9get_inputv+0x100>
    1eda:	3c 64                	cmp    $0x64,%al
    1edc:	75 2c                	jne    1f0a <_Z9get_inputv+0x6a>
        result = East;
    1ede:	b8 02 00 00 00       	mov    $0x2,%eax
}
    1ee3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    1ee8:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
    1eef:	00 00 
    1ef1:	0f 85 1b 01 00 00    	jne    2012 <_Z9get_inputv+0x172>
    1ef7:	48 83 c4 18          	add    $0x18,%rsp
    1efb:	5b                   	pop    %rbx
    1efc:	5d                   	pop    %rbp
    1efd:	c3                   	ret    
    1efe:	66 90                	xchg   %ax,%ax
    switch (user_input)
    1f00:	b8 01 00 00 00       	mov    $0x1,%eax
    1f05:	80 fb 77             	cmp    $0x77,%bl
    1f08:	74 d9                	je     1ee3 <_Z9get_inputv+0x43>
	__ostream_insert(__out, __s,
    1f0a:	48 8d 2d 6f 31 00 00 	lea    0x316f(%rip),%rbp        # 5080 <_ZSt4cout@GLIBCXX_3.4>
    1f11:	ba 19 00 00 00       	mov    $0x19,%edx
    1f16:	48 8d 35 01 11 00 00 	lea    0x1101(%rip),%rsi        # 301e <CSWTCH.32+0x4>
    1f1d:	48 89 ef             	mov    %rbp,%rdi
    1f20:	e8 bb f3 ff ff       	call   12e0 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
      if (__out.width() != 0)
    1f25:	48 8b 05 54 31 00 00 	mov    0x3154(%rip),%rax        # 5080 <_ZSt4cout@GLIBCXX_3.4>
    1f2c:	88 5c 24 07          	mov    %bl,0x7(%rsp)
    1f30:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    1f34:	48 83 7c 05 10 00    	cmpq   $0x0,0x10(%rbp,%rax,1)
    1f3a:	0f 85 80 00 00 00    	jne    1fc0 <_Z9get_inputv+0x120>
    1f40:	0f be f3             	movsbl %bl,%esi
      __out.put(__c);
    1f43:	48 89 ef             	mov    %rbp,%rdi
      return __out;
    1f46:	48 89 eb             	mov    %rbp,%rbx
      __out.put(__c);
    1f49:	e8 92 f2 ff ff       	call   11e0 <_ZNSo3putEc@plt>
	__ostream_insert(__out, __s,
    1f4e:	ba 01 00 00 00       	mov    $0x1,%edx
    1f53:	48 8d 35 de 10 00 00 	lea    0x10de(%rip),%rsi        # 3038 <CSWTCH.32+0x1e>
    1f5a:	48 89 df             	mov    %rbx,%rdi
    1f5d:	e8 7e f3 ff ff       	call   12e0 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    { return flush(__os.put(__os.widen('\n'))); }
    1f62:	48 8b 03             	mov    (%rbx),%rax
    1f65:	48 8b 40 e8          	mov    -0x18(%rax),%rax
    1f69:	48 8b ac 03 f0 00 00 	mov    0xf0(%rbx,%rax,1),%rbp
    1f70:	00 
      if (!__f)
    1f71:	48 85 ed             	test   %rbp,%rbp
    1f74:	0f 84 9d 00 00 00    	je     2017 <_Z9get_inputv+0x177>
	if (_M_widen_ok)
    1f7a:	80 7d 38 00          	cmpb   $0x0,0x38(%rbp)
    1f7e:	74 60                	je     1fe0 <_Z9get_inputv+0x140>
    1f80:	0f be 75 43          	movsbl 0x43(%rbp),%esi
    1f84:	48 89 df             	mov    %rbx,%rdi
    1f87:	e8 54 f2 ff ff       	call   11e0 <_ZNSo3putEc@plt>
    1f8c:	48 89 c7             	mov    %rax,%rdi
    { return __os.flush(); }
    1f8f:	e8 9c f2 ff ff       	call   1230 <_ZNSo5flushEv@plt>
        result = Error;
    1f94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    { return flush(__os.put(__os.widen('\n'))); }
    1f99:	e9 45 ff ff ff       	jmp    1ee3 <_Z9get_inputv+0x43>
    1f9e:	66 90                	xchg   %ax,%ax
        result = West;
    1fa0:	31 c0                	xor    %eax,%eax
    1fa2:	e9 3c ff ff ff       	jmp    1ee3 <_Z9get_inputv+0x43>
    1fa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    1fae:	00 00 
        result = South;
    1fb0:	b8 03 00 00 00       	mov    $0x3,%eax
    1fb5:	e9 29 ff ff ff       	jmp    1ee3 <_Z9get_inputv+0x43>
    1fba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	return __ostream_insert(__out, &__c, 1);
    1fc0:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
    1fc5:	ba 01 00 00 00       	mov    $0x1,%edx
    1fca:	48 89 ef             	mov    %rbp,%rdi
    1fcd:	e8 0e f3 ff ff       	call   12e0 <_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l@plt>
    1fd2:	48 89 c3             	mov    %rax,%rbx
    1fd5:	e9 74 ff ff ff       	jmp    1f4e <_Z9get_inputv+0xae>
    1fda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	this->_M_widen_init();
    1fe0:	48 89 ef             	mov    %rbp,%rdi
    1fe3:	e8 08 f3 ff ff       	call   12f0 <_ZNKSt5ctypeIcE13_M_widen_initEv@plt>
	return this->do_widen(__c);
    1fe8:	48 8b 45 00          	mov    0x0(%rbp),%rax
    1fec:	be 0a 00 00 00       	mov    $0xa,%esi
    1ff1:	48 8d 15 18 f7 ff ff 	lea    -0x8e8(%rip),%rdx        # 1710 <_ZNKSt5ctypeIcE8do_widenEc>
    1ff8:	48 8b 40 30          	mov    0x30(%rax),%rax
    1ffc:	48 39 d0             	cmp    %rdx,%rax
    1fff:	0f 84 7f ff ff ff    	je     1f84 <_Z9get_inputv+0xe4>
    2005:	48 89 ef             	mov    %rbp,%rdi
    2008:	ff d0                	call   *%rax
    { return flush(__os.put(__os.widen('\n'))); }
    200a:	0f be f0             	movsbl %al,%esi
    200d:	e9 72 ff ff ff       	jmp    1f84 <_Z9get_inputv+0xe4>
}
    2012:	e8 a9 f2 ff ff       	call   12c0 <__stack_chk_fail@plt>
	__throw_bad_cast();
    2017:	e8 e4 f2 ff ff       	call   1300 <_ZSt16__throw_bad_castv@plt>
    201c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002020 <_Z10input_initv>:
{
    2020:	f3 0f 1e fa          	endbr64 
    2024:	c3                   	ret    
    2025:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    202c:	00 00 00 
    202f:	90                   	nop

0000000000002030 <_Z17input_thread_workPv>:
{
    2030:	f3 0f 1e fa          	endbr64 
    2034:	53                   	push   %rbx
    2035:	48 89 fb             	mov    %rdi,%rbx
    struct Snake *snake = (struct Snake *)arg;
    2038:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    203f:	00 
        enum Direction direction = get_input();
    2040:	e8 5b fe ff ff       	call   1ea0 <_Z9get_inputv>
    this->next_direction = direction;
    2045:	89 43 54             	mov    %eax,0x54(%rbx)
    2048:	eb f6                	jmp    2040 <_Z17input_thread_workPv+0x10>
    204a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002050 <_ZN5Snake16update_directionE9Direction>:
{
    2050:	f3 0f 1e fa          	endbr64 
    2054:	41 54                	push   %r12
    sem_wait(&this->snake_sema);
    2056:	4c 8d 67 30          	lea    0x30(%rdi),%r12
{
    205a:	55                   	push   %rbp
    205b:	48 89 fd             	mov    %rdi,%rbp
    sem_wait(&this->snake_sema);
    205e:	4c 89 e7             	mov    %r12,%rdi
{
    2061:	53                   	push   %rbx
    2062:	89 f3                	mov    %esi,%ebx
    sem_wait(&this->snake_sema);
    2064:	e8 b7 f1 ff ff       	call   1220 <sem_wait@plt>
    switch (direction)
    2069:	83 fb 02             	cmp    $0x2,%ebx
    206c:	74 72                	je     20e0 <_ZN5Snake16update_directionE9Direction+0x90>
    206e:	7f 28                	jg     2098 <_ZN5Snake16update_directionE9Direction+0x48>
    2070:	85 db                	test   %ebx,%ebx
    2072:	74 4c                	je     20c0 <_ZN5Snake16update_directionE9Direction+0x70>
    2074:	83 fb 01             	cmp    $0x1,%ebx
    2077:	75 0d                	jne    2086 <_ZN5Snake16update_directionE9Direction+0x36>
        if (this->direction != South)
    2079:	83 7d 50 03          	cmpl   $0x3,0x50(%rbp)
    207d:	74 07                	je     2086 <_ZN5Snake16update_directionE9Direction+0x36>
            this->direction = direction;
    207f:	c7 45 50 01 00 00 00 	movl   $0x1,0x50(%rbp)
}
    2086:	5b                   	pop    %rbx
    sem_post(&this->snake_sema);
    2087:	4c 89 e7             	mov    %r12,%rdi
}
    208a:	5d                   	pop    %rbp
    208b:	41 5c                	pop    %r12
    sem_post(&this->snake_sema);
    208d:	e9 ae f2 ff ff       	jmp    1340 <sem_post@plt>
    2092:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    switch (direction)
    2098:	83 fb 03             	cmp    $0x3,%ebx
    209b:	75 e9                	jne    2086 <_ZN5Snake16update_directionE9Direction+0x36>
        if (this->direction != North)
    209d:	83 7d 50 01          	cmpl   $0x1,0x50(%rbp)
    20a1:	74 e3                	je     2086 <_ZN5Snake16update_directionE9Direction+0x36>
            this->direction = direction;
    20a3:	c7 45 50 03 00 00 00 	movl   $0x3,0x50(%rbp)
    sem_post(&this->snake_sema);
    20aa:	4c 89 e7             	mov    %r12,%rdi
}
    20ad:	5b                   	pop    %rbx
    20ae:	5d                   	pop    %rbp
    20af:	41 5c                	pop    %r12
    sem_post(&this->snake_sema);
    20b1:	e9 8a f2 ff ff       	jmp    1340 <sem_post@plt>
    20b6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    20bd:	00 00 00 
        if (this->direction != East)
    20c0:	83 7d 50 02          	cmpl   $0x2,0x50(%rbp)
    20c4:	74 c0                	je     2086 <_ZN5Snake16update_directionE9Direction+0x36>
            this->direction = direction;
    20c6:	c7 45 50 00 00 00 00 	movl   $0x0,0x50(%rbp)
    sem_post(&this->snake_sema);
    20cd:	4c 89 e7             	mov    %r12,%rdi
}
    20d0:	5b                   	pop    %rbx
    20d1:	5d                   	pop    %rbp
    20d2:	41 5c                	pop    %r12
    sem_post(&this->snake_sema);
    20d4:	e9 67 f2 ff ff       	jmp    1340 <sem_post@plt>
    20d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if (this->direction != West)
    20e0:	8b 45 50             	mov    0x50(%rbp),%eax
    20e3:	85 c0                	test   %eax,%eax
    20e5:	74 9f                	je     2086 <_ZN5Snake16update_directionE9Direction+0x36>
            this->direction = direction;
    20e7:	c7 45 50 02 00 00 00 	movl   $0x2,0x50(%rbp)
    sem_post(&this->snake_sema);
    20ee:	4c 89 e7             	mov    %r12,%rdi
}
    20f1:	5b                   	pop    %rbx
    20f2:	5d                   	pop    %rbp
    20f3:	41 5c                	pop    %r12
    sem_post(&this->snake_sema);
    20f5:	e9 46 f2 ff ff       	jmp    1340 <sem_post@plt>
    20fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002100 <_ZN5Snake21update_next_directionE9Direction>:
{
    2100:	f3 0f 1e fa          	endbr64 
    this->next_direction = direction;
    2104:	89 77 54             	mov    %esi,0x54(%rdi)
}
    2107:	c3                   	ret    
    2108:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    210f:	00 

0000000000002110 <_ZN5Snake13get_directionEv>:
{
    2110:	f3 0f 1e fa          	endbr64 
    2114:	55                   	push   %rbp
    sem_wait(&this->snake_sema);
    2115:	48 8d 6f 30          	lea    0x30(%rdi),%rbp
{
    2119:	53                   	push   %rbx
    211a:	48 89 fb             	mov    %rdi,%rbx
    sem_wait(&this->snake_sema);
    211d:	48 89 ef             	mov    %rbp,%rdi
{
    2120:	48 83 ec 08          	sub    $0x8,%rsp
    sem_wait(&this->snake_sema);
    2124:	e8 f7 f0 ff ff       	call   1220 <sem_wait@plt>
    result = this->direction;
    2129:	8b 5b 50             	mov    0x50(%rbx),%ebx
    sem_post(&this->snake_sema);
    212c:	48 89 ef             	mov    %rbp,%rdi
    212f:	e8 0c f2 ff ff       	call   1340 <sem_post@plt>
}
    2134:	48 83 c4 08          	add    $0x8,%rsp
    2138:	89 d8                	mov    %ebx,%eax
    213a:	5b                   	pop    %rbx
    213b:	5d                   	pop    %rbp
    213c:	c3                   	ret    
    213d:	90                   	nop
    213e:	66 90                	xchg   %ax,%ax

0000000000002140 <_ZN5Snake18validate_directionEv>:
{
    2140:	f3 0f 1e fa          	endbr64 
    2144:	41 54                	push   %r12
    2146:	55                   	push   %rbp
    2147:	53                   	push   %rbx
    if (next_direction != Error)
    2148:	8b 6f 54             	mov    0x54(%rdi),%ebp
    214b:	83 fd ff             	cmp    $0xffffffff,%ebp
    214e:	75 08                	jne    2158 <_ZN5Snake18validate_directionEv+0x18>
}
    2150:	5b                   	pop    %rbx
    2151:	5d                   	pop    %rbp
    2152:	41 5c                	pop    %r12
    2154:	c3                   	ret    
    2155:	0f 1f 00             	nopl   (%rax)
    sem_wait(&this->snake_sema);
    2158:	4c 8d 67 30          	lea    0x30(%rdi),%r12
    215c:	48 89 fb             	mov    %rdi,%rbx
    215f:	4c 89 e7             	mov    %r12,%rdi
    2162:	e8 b9 f0 ff ff       	call   1220 <sem_wait@plt>
    switch (direction)
    2167:	83 fd 02             	cmp    $0x2,%ebp
    216a:	74 54                	je     21c0 <_ZN5Snake18validate_directionEv+0x80>
    216c:	7f 22                	jg     2190 <_ZN5Snake18validate_directionEv+0x50>
    216e:	85 ed                	test   %ebp,%ebp
    2170:	74 36                	je     21a8 <_ZN5Snake18validate_directionEv+0x68>
    2172:	83 fd 01             	cmp    $0x1,%ebp
    2175:	75 0d                	jne    2184 <_ZN5Snake18validate_directionEv+0x44>
        if (this->direction != South)
    2177:	83 7b 50 03          	cmpl   $0x3,0x50(%rbx)
    217b:	74 07                	je     2184 <_ZN5Snake18validate_directionEv+0x44>
            this->direction = direction;
    217d:	c7 43 50 01 00 00 00 	movl   $0x1,0x50(%rbx)
}
    2184:	5b                   	pop    %rbx
    sem_post(&this->snake_sema);
    2185:	4c 89 e7             	mov    %r12,%rdi
}
    2188:	5d                   	pop    %rbp
    2189:	41 5c                	pop    %r12
    sem_post(&this->snake_sema);
    218b:	e9 b0 f1 ff ff       	jmp    1340 <sem_post@plt>
    switch (direction)
    2190:	83 fd 03             	cmp    $0x3,%ebp
    2193:	75 ef                	jne    2184 <_ZN5Snake18validate_directionEv+0x44>
        if (this->direction != North)
    2195:	83 7b 50 01          	cmpl   $0x1,0x50(%rbx)
    2199:	74 e9                	je     2184 <_ZN5Snake18validate_directionEv+0x44>
            this->direction = direction;
    219b:	c7 43 50 03 00 00 00 	movl   $0x3,0x50(%rbx)
    21a2:	eb e0                	jmp    2184 <_ZN5Snake18validate_directionEv+0x44>
    21a4:	0f 1f 40 00          	nopl   0x0(%rax)
        if (this->direction != East)
    21a8:	83 7b 50 02          	cmpl   $0x2,0x50(%rbx)
    21ac:	74 d6                	je     2184 <_ZN5Snake18validate_directionEv+0x44>
            this->direction = direction;
    21ae:	c7 43 50 00 00 00 00 	movl   $0x0,0x50(%rbx)
    21b5:	eb cd                	jmp    2184 <_ZN5Snake18validate_directionEv+0x44>
    21b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    21be:	00 00 
        if (this->direction != West)
    21c0:	8b 43 50             	mov    0x50(%rbx),%eax
    21c3:	85 c0                	test   %eax,%eax
    21c5:	74 bd                	je     2184 <_ZN5Snake18validate_directionEv+0x44>
            this->direction = direction;
    21c7:	c7 43 50 02 00 00 00 	movl   $0x2,0x50(%rbx)
    21ce:	eb b4                	jmp    2184 <_ZN5Snake18validate_directionEv+0x44>

00000000000021d0 <_ZN5Snake14set_snake_foodESt4pairIiiE>:
{
    21d0:	f3 0f 1e fa          	endbr64 
	first = __p.first;
    21d4:	48 89 77 58          	mov    %rsi,0x58(%rdi)
}
    21d8:	c3                   	ret    
    21d9:	90                   	nop
    21da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000021e0 <_ZN5Snake17clear_snake_worldEv>:
{
    21e0:	f3 0f 1e fa          	endbr64 
            snake_world_array[i][j] = 0;
    21e4:	48 c7 47 60 00 00 00 	movq   $0x0,0x60(%rdi)
    21eb:	00 
{
    21ec:	48 89 f8             	mov    %rdi,%rax
            snake_world_array[i][j] = 0;
    21ef:	48 8d 7f 68          	lea    0x68(%rdi),%rdi
    21f3:	48 c7 87 30 06 00 00 	movq   $0x0,0x630(%rdi)
    21fa:	00 00 00 00 
    21fe:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    2202:	29 f8                	sub    %edi,%eax
    2204:	8d 88 a0 06 00 00    	lea    0x6a0(%rax),%ecx
    220a:	31 c0                	xor    %eax,%eax
    220c:	c1 e9 03             	shr    $0x3,%ecx
    220f:	f3 48 ab             	rep stos %rax,%es:(%rdi)
}
    2212:	c3                   	ret    
    2213:	90                   	nop
    2214:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    221b:	00 00 00 00 
    221f:	90                   	nop

0000000000002220 <_ZN5Snake15update_movementEv>:
{
    2220:	f3 0f 1e fa          	endbr64 
    2224:	41 54                	push   %r12
    sem_wait(&this->snake_sema);
    2226:	4c 8d 67 30          	lea    0x30(%rdi),%r12
{
    222a:	55                   	push   %rbp
    222b:	53                   	push   %rbx
    222c:	48 89 fb             	mov    %rdi,%rbx
    sem_wait(&this->snake_sema);
    222f:	4c 89 e7             	mov    %r12,%rdi
{
    2232:	48 83 ec 10          	sub    $0x10,%rsp
    2236:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    223d:	00 00 
    223f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2244:	31 c0                	xor    %eax,%eax
    pair<int, int> movement_part;
    2246:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
    224d:	00 
    sem_wait(&this->snake_sema);
    224e:	e8 cd ef ff ff       	call   1220 <sem_wait@plt>
    result = this->direction;
    2253:	8b 6b 50             	mov    0x50(%rbx),%ebp
    sem_post(&this->snake_sema);
    2256:	4c 89 e7             	mov    %r12,%rdi
    2259:	e8 e2 f0 ff ff       	call   1340 <sem_post@plt>
    switch (direction)
    225e:	83 fd 02             	cmp    $0x2,%ebp
    2261:	0f 84 c9 01 00 00    	je     2430 <_ZN5Snake15update_movementEv+0x210>
    2267:	0f 8f ab 00 00 00    	jg     2318 <_ZN5Snake15update_movementEv+0xf8>
    226d:	85 ed                	test   %ebp,%ebp
    226f:	0f 84 9b 01 00 00    	je     2410 <_ZN5Snake15update_movementEv+0x1f0>
    2275:	83 fd 01             	cmp    $0x1,%ebp
    2278:	0f 85 82 01 00 00    	jne    2400 <_ZN5Snake15update_movementEv+0x1e0>
        movement_part = make_pair(snake_head.first - 1, snake_head.second);
    227e:	8b 43 18             	mov    0x18(%rbx),%eax
    2281:	8d 50 ff             	lea    -0x1(%rax),%edx
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
    2284:	8b 43 1c             	mov    0x1c(%rbx),%eax
	first = std::forward<first_type>(__p.first);
    2287:	66 0f 6e c2          	movd   %edx,%xmm0
    228b:	66 0f 6e d8          	movd   %eax,%xmm3
    228f:	66 0f 62 c3          	punpckldq %xmm3,%xmm0
    2293:	66 0f d6 04 24       	movq   %xmm0,(%rsp)
	first = __p.first;
    2298:	89 53 18             	mov    %edx,0x18(%rbx)
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    229b:	48 8b 73 08          	mov    0x8(%rbx),%rsi
	second = __p.second;
    229f:	89 43 1c             	mov    %eax,0x1c(%rbx)
    22a2:	48 3b 73 10          	cmp    0x10(%rbx),%rsi
    22a6:	0f 84 a4 00 00 00    	je     2350 <_ZN5Snake15update_movementEv+0x130>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    22ac:	48 8b 04 24          	mov    (%rsp),%rax
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     __x);
	    ++this->_M_impl._M_finish;
    22b0:	48 83 c6 08          	add    $0x8,%rsi
    22b4:	48 89 46 f8          	mov    %rax,-0x8(%rsi)
    food_eaten = snake_head.first == snake_food.first && snake_head.second == snake_food.second;
    22b8:	48 8b 43 58          	mov    0x58(%rbx),%rax
    22bc:	48 39 43 18          	cmp    %rax,0x18(%rbx)
    22c0:	48 89 73 08          	mov    %rsi,0x8(%rbx)
    22c4:	0f 94 43 20          	sete   0x20(%rbx)
    if (food_eaten)
    22c8:	0f 85 a2 00 00 00    	jne    2370 <_ZN5Snake15update_movementEv+0x150>
        length++;
    22ce:	83 43 24 01          	addl   $0x1,0x24(%rbx)
    int head_value = ++snake_world_array[snake_head.first][snake_head.second];
    22d2:	48 63 43 18          	movslq 0x18(%rbx),%rax
    22d6:	48 63 53 1c          	movslq 0x1c(%rbx),%rdx
    22da:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
    22de:	48 8d 54 82 18       	lea    0x18(%rdx,%rax,4),%rdx
    22e3:	8b 04 93             	mov    (%rbx,%rdx,4),%eax
    22e6:	83 c0 01             	add    $0x1,%eax
    22e9:	89 04 93             	mov    %eax,(%rbx,%rdx,4)
    if (head_value > 1)
    22ec:	83 f8 01             	cmp    $0x1,%eax
    22ef:	7e 04                	jle    22f5 <_ZN5Snake15update_movementEv+0xd5>
        is_dead = true;
    22f1:	c6 43 21 01          	movb   $0x1,0x21(%rbx)
}
    22f5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    22fa:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    2301:	00 00 
    2303:	0f 85 4a 01 00 00    	jne    2453 <_ZN5Snake15update_movementEv+0x233>
    2309:	48 83 c4 10          	add    $0x10,%rsp
    230d:	5b                   	pop    %rbx
    230e:	5d                   	pop    %rbp
    230f:	41 5c                	pop    %r12
    2311:	c3                   	ret    
    2312:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    switch (direction)
    2318:	83 fd 03             	cmp    $0x3,%ebp
    231b:	0f 85 df 00 00 00    	jne    2400 <_ZN5Snake15update_movementEv+0x1e0>
        movement_part = make_pair(snake_head.first + 1, snake_head.second);
    2321:	8b 43 18             	mov    0x18(%rbx),%eax
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    2324:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    2328:	8d 50 01             	lea    0x1(%rax),%edx
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
    232b:	8b 43 1c             	mov    0x1c(%rbx),%eax
	first = std::forward<first_type>(__p.first);
    232e:	66 0f 6e c2          	movd   %edx,%xmm0
	first = __p.first;
    2332:	89 53 18             	mov    %edx,0x18(%rbx)
	first = std::forward<first_type>(__p.first);
    2335:	66 0f 6e e8          	movd   %eax,%xmm5
	second = __p.second;
    2339:	89 43 1c             	mov    %eax,0x1c(%rbx)
	first = std::forward<first_type>(__p.first);
    233c:	66 0f 62 c5          	punpckldq %xmm5,%xmm0
    2340:	66 0f d6 04 24       	movq   %xmm0,(%rsp)
    2345:	48 3b 73 10          	cmp    0x10(%rbx),%rsi
    2349:	0f 85 5d ff ff ff    	jne    22ac <_ZN5Snake15update_movementEv+0x8c>
    234f:	90                   	nop
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
    2350:	48 89 e2             	mov    %rsp,%rdx
    2353:	48 89 df             	mov    %rbx,%rdi
    2356:	e8 a5 03 00 00       	call   2700 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
    food_eaten = snake_head.first == snake_food.first && snake_head.second == snake_food.second;
    235b:	48 8b 43 58          	mov    0x58(%rbx),%rax
    235f:	48 39 43 18          	cmp    %rax,0x18(%rbx)
    2363:	0f 94 43 20          	sete   0x20(%rbx)
    if (food_eaten)
    2367:	0f 84 61 ff ff ff    	je     22ce <_ZN5Snake15update_movementEv+0xae>
    236d:	0f 1f 00             	nopl   (%rax)
    2370:	48 8b 0b             	mov    (%rbx),%rcx
    2373:	48 8b 73 08          	mov    0x8(%rbx),%rsi
        snake_world_array[tail.first][tail.second]--;
    2377:	48 63 01             	movslq (%rcx),%rax
    237a:	48 63 51 04          	movslq 0x4(%rcx),%rdx
    237e:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
    2382:	48 8d 44 82 18       	lea    0x18(%rdx,%rax,4),%rax
      { _M_current += __n; return *this; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
    2387:	48 8d 51 08          	lea    0x8(%rcx),%rdx
    238b:	83 2c 83 01          	subl   $0x1,(%rbx,%rax,4)
    _GLIBCXX20_CONSTEXPR
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
    238f:	48 39 d6             	cmp    %rdx,%rsi
    2392:	74 55                	je     23e9 <_ZN5Snake15update_movementEv+0x1c9>
	_GLIBCXX20_CONSTEXPR
	static _OI
	__copy_m(_II __first, _II __last, _OI __result)
	{
	  typedef typename iterator_traits<_II>::difference_type _Distance;
	  for(_Distance __n = __last - __first; __n > 0; --__n)
    2394:	48 89 f0             	mov    %rsi,%rax
    2397:	48 29 d0             	sub    %rdx,%rax
    239a:	48 89 c7             	mov    %rax,%rdi
    239d:	48 c1 ff 03          	sar    $0x3,%rdi
    23a1:	48 85 c0             	test   %rax,%rax
    23a4:	7e 43                	jle    23e9 <_ZN5Snake15update_movementEv+0x1c9>
    23a6:	48 83 f8 08          	cmp    $0x8,%rax
    23aa:	0f 8e 9f 00 00 00    	jle    244f <_ZN5Snake15update_movementEv+0x22f>
    23b0:	48 89 fa             	mov    %rdi,%rdx
    23b3:	48 89 c8             	mov    %rcx,%rax
    23b6:	48 d1 ea             	shr    %rdx
    23b9:	48 c1 e2 04          	shl    $0x4,%rdx
    23bd:	48 01 ca             	add    %rcx,%rdx
    23c0:	f3 0f 6f 48 08       	movdqu 0x8(%rax),%xmm1
    23c5:	48 83 c0 10          	add    $0x10,%rax
    23c9:	0f 11 48 f0          	movups %xmm1,-0x10(%rax)
    23cd:	48 39 c2             	cmp    %rax,%rdx
    23d0:	75 ee                	jne    23c0 <_ZN5Snake15update_movementEv+0x1a0>
    23d2:	40 f6 c7 01          	test   $0x1,%dil
    23d6:	74 11                	je     23e9 <_ZN5Snake15update_movementEv+0x1c9>
    23d8:	48 83 e7 fe          	and    $0xfffffffffffffffe,%rdi
      operator=(__conditional_t<__and_<is_move_assignable<_T1>,
    23dc:	48 83 c7 01          	add    $0x1,%rdi
	first = std::forward<first_type>(__p.first);
    23e0:	48 8b 04 f9          	mov    (%rcx,%rdi,8),%rax
    23e4:	48 89 44 f9 f8       	mov    %rax,-0x8(%rcx,%rdi,8)
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
    23e9:	48 83 ee 08          	sub    $0x8,%rsi
    23ed:	48 89 73 08          	mov    %rsi,0x8(%rbx)
    23f1:	e9 dc fe ff ff       	jmp    22d2 <_ZN5Snake15update_movementEv+0xb2>
    23f6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    23fd:	00 00 00 
    switch (direction)
    2400:	31 c0                	xor    %eax,%eax
    2402:	31 d2                	xor    %edx,%edx
    2404:	e9 8f fe ff ff       	jmp    2298 <_ZN5Snake15update_movementEv+0x78>
    2409:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        movement_part = make_pair(snake_head.first, snake_head.second - 1);
    2410:	8b 43 1c             	mov    0x1c(%rbx),%eax
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
    2413:	8b 53 18             	mov    0x18(%rbx),%edx
    2416:	83 e8 01             	sub    $0x1,%eax
	first = std::forward<first_type>(__p.first);
    2419:	66 0f 6e c2          	movd   %edx,%xmm0
    241d:	66 0f 6e d0          	movd   %eax,%xmm2
    2421:	66 0f 62 c2          	punpckldq %xmm2,%xmm0
    2425:	66 0f d6 04 24       	movq   %xmm0,(%rsp)
        break;
    242a:	e9 69 fe ff ff       	jmp    2298 <_ZN5Snake15update_movementEv+0x78>
    242f:	90                   	nop
        movement_part = make_pair(snake_head.first, snake_head.second + 1);
    2430:	8b 43 1c             	mov    0x1c(%rbx),%eax
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
    2433:	8b 53 18             	mov    0x18(%rbx),%edx
    2436:	83 c0 01             	add    $0x1,%eax
	first = std::forward<first_type>(__p.first);
    2439:	66 0f 6e c2          	movd   %edx,%xmm0
    243d:	66 0f 6e e0          	movd   %eax,%xmm4
    2441:	66 0f 62 c4          	punpckldq %xmm4,%xmm0
    2445:	66 0f d6 04 24       	movq   %xmm0,(%rsp)
        break;
    244a:	e9 49 fe ff ff       	jmp    2298 <_ZN5Snake15update_movementEv+0x78>
    244f:	31 ff                	xor    %edi,%edi
    2451:	eb 89                	jmp    23dc <_ZN5Snake15update_movementEv+0x1bc>
}
    2453:	e8 68 ee ff ff       	call   12c0 <__stack_chk_fail@plt>
    2458:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    245f:	00 

0000000000002460 <_ZN5Snake16initialize_snakeEv>:
{
    2460:	f3 0f 1e fa          	endbr64 
    2464:	53                   	push   %rbx
    2465:	48 89 fb             	mov    %rdi,%rbx
    2468:	48 83 ec 10          	sub    $0x10,%rsp
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    246c:	48 8b 77 08          	mov    0x8(%rdi),%rsi
    2470:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2477:	00 00 
    2479:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    247e:	31 c0                	xor    %eax,%eax
        pair<int, int> snake_part = make_pair(MAP_HEIGHT / 2, MAP_WIDTH / 2 - (INITIAL_SNAKE_LENGTH / 2) + i);
    2480:	48 8b 05 d1 0b 00 00 	mov    0xbd1(%rip),%rax        # 3058 <CSWTCH.32+0x3e>
    2487:	48 89 04 24          	mov    %rax,(%rsp)
    248b:	48 39 77 10          	cmp    %rsi,0x10(%rdi)
    248f:	0f 84 9b 00 00 00    	je     2530 <_ZN5Snake16initialize_snakeEv+0xd0>
    2495:	48 8b 04 24          	mov    (%rsp),%rax
	    ++this->_M_impl._M_finish;
    2499:	48 83 c6 08          	add    $0x8,%rsi
    249d:	48 89 46 f8          	mov    %rax,-0x8(%rsi)
    24a1:	48 89 77 08          	mov    %rsi,0x8(%rdi)
    24a5:	48 8b 05 b4 0b 00 00 	mov    0xbb4(%rip),%rax        # 3060 <CSWTCH.32+0x46>
        snake_world_array[snake_part.first][snake_part.second] = 1;
    24ac:	c7 83 a4 03 00 00 01 	movl   $0x1,0x3a4(%rbx)
    24b3:	00 00 00 
        pair<int, int> snake_part = make_pair(MAP_HEIGHT / 2, MAP_WIDTH / 2 - (INITIAL_SNAKE_LENGTH / 2) + i);
    24b6:	48 89 04 24          	mov    %rax,(%rsp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    24ba:	48 3b 73 10          	cmp    0x10(%rbx),%rsi
    24be:	0f 84 84 00 00 00    	je     2548 <_ZN5Snake16initialize_snakeEv+0xe8>
    24c4:	48 8b 04 24          	mov    (%rsp),%rax
	    ++this->_M_impl._M_finish;
    24c8:	48 83 c6 08          	add    $0x8,%rsi
    24cc:	48 89 46 f8          	mov    %rax,-0x8(%rsi)
    24d0:	48 89 73 08          	mov    %rsi,0x8(%rbx)
    24d4:	48 8b 05 8d 0b 00 00 	mov    0xb8d(%rip),%rax        # 3068 <CSWTCH.32+0x4e>
        snake_world_array[snake_part.first][snake_part.second] = 1;
    24db:	c7 83 a8 03 00 00 01 	movl   $0x1,0x3a8(%rbx)
    24e2:	00 00 00 
        pair<int, int> snake_part = make_pair(MAP_HEIGHT / 2, MAP_WIDTH / 2 - (INITIAL_SNAKE_LENGTH / 2) + i);
    24e5:	48 89 04 24          	mov    %rax,(%rsp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    24e9:	48 39 73 10          	cmp    %rsi,0x10(%rbx)
    24ed:	74 71                	je     2560 <_ZN5Snake16initialize_snakeEv+0x100>
    24ef:	48 8b 04 24          	mov    (%rsp),%rax
	    ++this->_M_impl._M_finish;
    24f3:	48 83 c6 08          	add    $0x8,%rsi
    24f7:	48 89 46 f8          	mov    %rax,-0x8(%rsi)
    24fb:	48 89 73 08          	mov    %rsi,0x8(%rbx)
        snake_world_array[snake_part.first][snake_part.second] = 1;
    24ff:	c7 83 ac 03 00 00 01 	movl   $0x1,0x3ac(%rbx)
    2506:	00 00 00 
	first = __p.first;
    2509:	48 8b 46 f8          	mov    -0x8(%rsi),%rax
    250d:	48 89 43 18          	mov    %rax,0x18(%rbx)
    2511:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    2516:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    251d:	00 00 
    251f:	75 50                	jne    2571 <_ZN5Snake16initialize_snakeEv+0x111>
    2521:	48 83 c4 10          	add    $0x10,%rsp
    2525:	5b                   	pop    %rbx
    2526:	c3                   	ret    
    2527:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    252e:	00 00 
	  _M_realloc_insert(end(), __x);
    2530:	48 89 e2             	mov    %rsp,%rdx
    2533:	e8 c8 01 00 00       	call   2700 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    2538:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    253c:	e9 64 ff ff ff       	jmp    24a5 <_ZN5Snake16initialize_snakeEv+0x45>
    2541:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	  _M_realloc_insert(end(), __x);
    2548:	48 89 e2             	mov    %rsp,%rdx
    254b:	48 89 df             	mov    %rbx,%rdi
    254e:	e8 ad 01 00 00       	call   2700 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    2553:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    2557:	e9 78 ff ff ff       	jmp    24d4 <_ZN5Snake16initialize_snakeEv+0x74>
    255c:	0f 1f 40 00          	nopl   0x0(%rax)
	  _M_realloc_insert(end(), __x);
    2560:	48 89 e2             	mov    %rsp,%rdx
    2563:	48 89 df             	mov    %rbx,%rdi
    2566:	e8 95 01 00 00       	call   2700 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    256b:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    256f:	eb 8e                	jmp    24ff <_ZN5Snake16initialize_snakeEv+0x9f>
    2571:	e8 4a ed ff ff       	call   12c0 <__stack_chk_fail@plt>
    2576:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    257d:	00 00 00 

0000000000002580 <_ZN5SnakeC1Ev>:
Snake::Snake(void)
    2580:	f3 0f 1e fa          	endbr64 
    2584:	55                   	push   %rbp
	: _M_start(), _M_finish(), _M_end_of_storage()
    2585:	66 0f ef c0          	pxor   %xmm0,%xmm0
	  _M_realloc_insert(end(), __x);
    2589:	31 f6                	xor    %esi,%esi
    258b:	53                   	push   %rbx
    258c:	48 89 fb             	mov    %rdi,%rbx
            snake_world_array[i][j] = 0;
    258f:	48 8d 7f 68          	lea    0x68(%rdi),%rdi
Snake::Snake(void)
    2593:	48 83 ec 18          	sub    $0x18,%rsp
    2597:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    259e:	00 00 
    25a0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    25a5:	31 c0                	xor    %eax,%eax
	: _M_start(), _M_finish(), _M_end_of_storage()
    25a7:	0f 11 47 98          	movups %xmm0,-0x68(%rdi)
    direction = East;
    25ab:	66 0f 6f 05 bd 0a 00 	movdqa 0xabd(%rip),%xmm0        # 3070 <CSWTCH.32+0x56>
    25b2:	00 
            snake_world_array[i][j] = 0;
    25b3:	89 d8                	mov    %ebx,%eax
    25b5:	48 c7 47 f8 00 00 00 	movq   $0x0,-0x8(%rdi)
    25bc:	00 
	  _M_realloc_insert(end(), __x);
    25bd:	48 89 e5             	mov    %rsp,%rbp
    25c0:	48 c7 87 30 06 00 00 	movq   $0x0,0x630(%rdi)
    25c7:	00 00 00 00 
    25cb:	48 89 ea             	mov    %rbp,%rdx
	: _M_start(), _M_finish(), _M_end_of_storage()
    25ce:	48 c7 47 a8 00 00 00 	movq   $0x0,-0x58(%rdi)
    25d5:	00 
      : first(), second() { }
    25d6:	48 c7 47 b0 00 00 00 	movq   $0x0,-0x50(%rdi)
    25dd:	00 
    direction = East;
    25de:	0f 11 47 e8          	movups %xmm0,-0x18(%rdi)
    food_eaten = false;
    25e2:	66 c7 47 b8 00 00    	movw   $0x0,-0x48(%rdi)
    length = INITIAL_SNAKE_LENGTH;
    25e8:	c7 47 bc 03 00 00 00 	movl   $0x3,-0x44(%rdi)
            snake_world_array[i][j] = 0;
    25ef:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    25f3:	29 f8                	sub    %edi,%eax
    25f5:	8d 88 a0 06 00 00    	lea    0x6a0(%rax),%ecx
    25fb:	31 c0                	xor    %eax,%eax
    25fd:	c1 e9 03             	shr    $0x3,%ecx
    2600:	f3 48 ab             	rep stos %rax,%es:(%rdi)
        pair<int, int> snake_part = make_pair(MAP_HEIGHT / 2, MAP_WIDTH / 2 - (INITIAL_SNAKE_LENGTH / 2) + i);
    2603:	48 8b 05 4e 0a 00 00 	mov    0xa4e(%rip),%rax        # 3058 <CSWTCH.32+0x3e>
	  _M_realloc_insert(end(), __x);
    260a:	48 89 df             	mov    %rbx,%rdi
    260d:	48 89 04 24          	mov    %rax,(%rsp)
    2611:	e8 ea 00 00 00       	call   2700 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
    2616:	48 8b 15 43 0a 00 00 	mov    0xa43(%rip),%rdx        # 3060 <CSWTCH.32+0x46>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    261d:	48 8b 73 08          	mov    0x8(%rbx),%rsi
        snake_world_array[snake_part.first][snake_part.second] = 1;
    2621:	c7 83 a4 03 00 00 01 	movl   $0x1,0x3a4(%rbx)
    2628:	00 00 00 
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    262b:	48 8b 43 10          	mov    0x10(%rbx),%rax
        pair<int, int> snake_part = make_pair(MAP_HEIGHT / 2, MAP_WIDTH / 2 - (INITIAL_SNAKE_LENGTH / 2) + i);
    262f:	48 89 14 24          	mov    %rdx,(%rsp)
    2633:	48 39 f0             	cmp    %rsi,%rax
    2636:	0f 84 87 00 00 00    	je     26c3 <_ZN5SnakeC1Ev+0x143>
    263c:	48 8b 14 24          	mov    (%rsp),%rdx
	    ++this->_M_impl._M_finish;
    2640:	48 83 c6 08          	add    $0x8,%rsi
    2644:	48 89 56 f8          	mov    %rdx,-0x8(%rsi)
    2648:	48 89 73 08          	mov    %rsi,0x8(%rbx)
    264c:	48 8b 15 15 0a 00 00 	mov    0xa15(%rip),%rdx        # 3068 <CSWTCH.32+0x4e>
        snake_world_array[snake_part.first][snake_part.second] = 1;
    2653:	c7 83 a8 03 00 00 01 	movl   $0x1,0x3a8(%rbx)
    265a:	00 00 00 
        pair<int, int> snake_part = make_pair(MAP_HEIGHT / 2, MAP_WIDTH / 2 - (INITIAL_SNAKE_LENGTH / 2) + i);
    265d:	48 89 14 24          	mov    %rdx,(%rsp)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    2661:	48 39 c6             	cmp    %rax,%rsi
    2664:	74 78                	je     26de <_ZN5SnakeC1Ev+0x15e>
    2666:	48 8b 04 24          	mov    (%rsp),%rax
	    ++this->_M_impl._M_finish;
    266a:	48 83 c6 08          	add    $0x8,%rsi
    266e:	48 89 46 f8          	mov    %rax,-0x8(%rsi)
    2672:	48 89 73 08          	mov    %rsi,0x8(%rbx)
        snake_world_array[snake_part.first][snake_part.second] = 1;
    2676:	c7 83 ac 03 00 00 01 	movl   $0x1,0x3ac(%rbx)
    267d:	00 00 00 
	first = __p.first;
    2680:	48 8b 46 f8          	mov    -0x8(%rsi),%rax
    sem_init(&snake_sema, 0, 1);
    2684:	48 8d 7b 30          	lea    0x30(%rbx),%rdi
    2688:	31 f6                	xor    %esi,%esi
    268a:	ba 01 00 00 00       	mov    $0x1,%edx
    268f:	48 89 43 18          	mov    %rax,0x18(%rbx)
    2693:	e8 c8 eb ff ff       	call   1260 <sem_init@plt>
    pthread_create(&input_thread, NULL, input_thread_work, this);
    2698:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    269d:	64 48 2b 04 25 28 00 	sub    %fs:0x28,%rax
    26a4:	00 00 
    26a6:	75 47                	jne    26ef <_ZN5SnakeC1Ev+0x16f>
}
    26a8:	48 83 c4 18          	add    $0x18,%rsp
    pthread_create(&input_thread, NULL, input_thread_work, this);
    26ac:	48 8d 7b 28          	lea    0x28(%rbx),%rdi
    26b0:	48 89 d9             	mov    %rbx,%rcx
    26b3:	31 f6                	xor    %esi,%esi
}
    26b5:	5b                   	pop    %rbx
    pthread_create(&input_thread, NULL, input_thread_work, this);
    26b6:	48 8d 15 73 f9 ff ff 	lea    -0x68d(%rip),%rdx        # 2030 <_Z17input_thread_workPv>
}
    26bd:	5d                   	pop    %rbp
    pthread_create(&input_thread, NULL, input_thread_work, this);
    26be:	e9 ad ec ff ff       	jmp    1370 <pthread_create@plt>
	  _M_realloc_insert(end(), __x);
    26c3:	48 89 ea             	mov    %rbp,%rdx
    26c6:	48 89 c6             	mov    %rax,%rsi
    26c9:	48 89 df             	mov    %rbx,%rdi
    26cc:	e8 2f 00 00 00       	call   2700 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    26d1:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    26d5:	48 8b 43 10          	mov    0x10(%rbx),%rax
    26d9:	e9 6e ff ff ff       	jmp    264c <_ZN5SnakeC1Ev+0xcc>
	  _M_realloc_insert(end(), __x);
    26de:	48 89 ea             	mov    %rbp,%rdx
    26e1:	48 89 df             	mov    %rbx,%rdi
    26e4:	e8 17 00 00 00       	call   2700 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    26e9:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    26ed:	eb 87                	jmp    2676 <_ZN5SnakeC1Ev+0xf6>
    26ef:	e8 cc eb ff ff       	call   12c0 <__stack_chk_fail@plt>
    26f4:	f3 0f 1e fa          	endbr64 
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    26f8:	48 89 c5             	mov    %rax,%rbp
    26fb:	e9 a0 ec ff ff       	jmp    13a0 <_ZN5SnakeC2Ev.cold>

0000000000002700 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
    2700:	f3 0f 1e fa          	endbr64 
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
    2704:	48 b9 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rcx
    270b:	ff ff 0f 
    270e:	41 57                	push   %r15
    2710:	41 56                	push   %r14
    2712:	41 55                	push   %r13
    2714:	41 54                	push   %r12
    2716:	55                   	push   %rbp
    2717:	53                   	push   %rbx
    2718:	48 83 ec 18          	sub    $0x18,%rsp
    271c:	4c 8b 7f 08          	mov    0x8(%rdi),%r15
      size() const _GLIBCXX_NOEXCEPT
    2720:	4c 8b 27             	mov    (%rdi),%r12
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    2723:	4c 89 f8             	mov    %r15,%rax
    2726:	4c 29 e0             	sub    %r12,%rax
    2729:	48 c1 f8 03          	sar    $0x3,%rax
	if (max_size() - size() < __n)
    272d:	48 39 c8             	cmp    %rcx,%rax
    2730:	0f 84 18 01 00 00    	je     284e <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x14e>
      if (__a < __b)
    2736:	4d 39 fc             	cmp    %r15,%r12
    2739:	b9 01 00 00 00       	mov    $0x1,%ecx
    273e:	49 89 f6             	mov    %rsi,%r14
    max(const _Tp& __a, const _Tp& __b)
    2741:	49 89 fd             	mov    %rdi,%r13
      if (__a < __b)
    2744:	48 0f 45 c8          	cmovne %rax,%rcx
    2748:	48 01 c8             	add    %rcx,%rax
    274b:	0f 92 c1             	setb   %cl
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    274e:	4c 29 e6             	sub    %r12,%rsi
    2751:	0f b6 c9             	movzbl %cl,%ecx
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    2754:	48 85 c9             	test   %rcx,%rcx
    2757:	0f 85 a3 00 00 00    	jne    2800 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x100>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    275d:	48 85 c0             	test   %rax,%rax
    2760:	0f 85 cd 00 00 00    	jne    2833 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x133>
    2766:	bb 08 00 00 00       	mov    $0x8,%ebx
    276b:	31 ed                	xor    %ebp,%ebp
    276d:	45 31 c0             	xor    %r8d,%r8d
    2770:	48 8b 02             	mov    (%rdx),%rax
    2773:	49 89 04 30          	mov    %rax,(%r8,%rsi,1)
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
    2777:	4d 39 e6             	cmp    %r12,%r14
    277a:	74 2c                	je     27a8 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa8>
    277c:	4c 89 f6             	mov    %r14,%rsi
      _ForwardIterator __cur = __result;
    277f:	4c 89 c0             	mov    %r8,%rax
      for (; __first != __last; ++__first, (void)++__cur)
    2782:	4c 89 e2             	mov    %r12,%rdx
    2785:	4c 29 e6             	sub    %r12,%rsi
    2788:	4c 01 c6             	add    %r8,%rsi
    278b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    2790:	48 8b 0a             	mov    (%rdx),%rcx
    2793:	48 83 c0 08          	add    $0x8,%rax
    2797:	48 83 c2 08          	add    $0x8,%rdx
    279b:	48 89 48 f8          	mov    %rcx,-0x8(%rax)
    279f:	48 39 f0             	cmp    %rsi,%rax
    27a2:	75 ec                	jne    2790 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x90>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
    27a4:	48 8d 58 08          	lea    0x8(%rax),%rbx
    27a8:	4d 39 fe             	cmp    %r15,%r14
    27ab:	74 1c                	je     27c9 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xc9>
    27ad:	4d 29 f7             	sub    %r14,%r15
    27b0:	48 89 df             	mov    %rbx,%rdi
    27b3:	4c 89 f6             	mov    %r14,%rsi
    27b6:	4c 89 04 24          	mov    %r8,(%rsp)
    27ba:	4c 89 fa             	mov    %r15,%rdx
    27bd:	4c 01 fb             	add    %r15,%rbx
    27c0:	e8 8b ea ff ff       	call   1250 <memcpy@plt>
    27c5:	4c 8b 04 24          	mov    (%rsp),%r8
	if (__p)
    27c9:	4d 85 e4             	test   %r12,%r12
    27cc:	74 17                	je     27e5 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xe5>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
    27ce:	49 8b 75 10          	mov    0x10(%r13),%rsi
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
    27d2:	4c 89 e7             	mov    %r12,%rdi
    27d5:	4c 89 04 24          	mov    %r8,(%rsp)
    27d9:	4c 29 e6             	sub    %r12,%rsi
    27dc:	e8 cf ea ff ff       	call   12b0 <_ZdlPvm@plt>
    27e1:	4c 8b 04 24          	mov    (%rsp),%r8
      this->_M_impl._M_start = __new_start;
    27e5:	4d 89 45 00          	mov    %r8,0x0(%r13)
      this->_M_impl._M_finish = __new_finish;
    27e9:	49 89 5d 08          	mov    %rbx,0x8(%r13)
      this->_M_impl._M_end_of_storage = __new_start + __len;
    27ed:	49 89 6d 10          	mov    %rbp,0x10(%r13)
    }
    27f1:	48 83 c4 18          	add    $0x18,%rsp
    27f5:	5b                   	pop    %rbx
    27f6:	5d                   	pop    %rbp
    27f7:	41 5c                	pop    %r12
    27f9:	41 5d                	pop    %r13
    27fb:	41 5e                	pop    %r14
    27fd:	41 5f                	pop    %r15
    27ff:	c3                   	ret    
    2800:	48 bd f8 ff ff ff ff 	movabs $0x7ffffffffffffff8,%rbp
    2807:	ff ff 7f 
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
    280a:	48 89 ef             	mov    %rbp,%rdi
    280d:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    2812:	48 89 34 24          	mov    %rsi,(%rsp)
    2816:	e8 85 ea ff ff       	call   12a0 <_Znwm@plt>
    281b:	48 8b 34 24          	mov    (%rsp),%rsi
    281f:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    2824:	49 89 c0             	mov    %rax,%r8
      this->_M_impl._M_end_of_storage = __new_start + __len;
    2827:	48 01 c5             	add    %rax,%rbp
	      ++__new_finish;
    282a:	48 8d 58 08          	lea    0x8(%rax),%rbx
    282e:	e9 3d ff ff ff       	jmp    2770 <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x70>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    2833:	48 b9 ff ff ff ff ff 	movabs $0xfffffffffffffff,%rcx
    283a:	ff ff 0f 
    283d:	48 39 c8             	cmp    %rcx,%rax
    2840:	48 0f 47 c1          	cmova  %rcx,%rax
    2844:	48 8d 2c c5 00 00 00 	lea    0x0(,%rax,8),%rbp
    284b:	00 
    284c:	eb bc                	jmp    280a <_ZNSt6vectorISt4pairIiiESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x10a>
	  __throw_length_error(__N(__s));
    284e:	48 8d 3d e5 07 00 00 	lea    0x7e5(%rip),%rdi        # 303a <CSWTCH.32+0x20>
    2855:	e8 b6 e9 ff ff       	call   1210 <_ZSt20__throw_length_errorPKc@plt>

Disassembly of section .fini:

000000000000285c <_fini>:
    285c:	f3 0f 1e fa          	endbr64 
    2860:	48 83 ec 08          	sub    $0x8,%rsp
    2864:	48 83 c4 08          	add    $0x8,%rsp
    2868:	c3                   	ret    
